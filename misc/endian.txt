%%%%%%%%%%%%%%%%%%%%%%%%
A big-endian (a.k.a. Network Byte Order) architecture stores the most
significant byte at the lowest address offset while little-endian architecture
stores the least significant byte at the lowest address offset.

32-bit hex value 0x12345678 would be stored in memory as follows:

Address         00    01    02     03
----------      --    --    --     --
big-endian      12    34    56     78
little-endian   78    56    34     12



%%%%%%%%%%%%%%%%%%%%%%%%
An Essay on Endian Order

Copyright (C) Dr. William T. Verts, April 19, 1996
Depending on which computing system you use, you will have to consider the
byte order in which multibyte numbers are stored, particularly when you are
writing those numbers to a file. The two orders are called "Little Endian" and
"Big Endian".

The Basics

"Little Endian" means that the low-order byte of the number is stored in
memory at the lowest address, and the high-order byte at the highest address.
(The little end comes first.) For example, a 4 byte LongInt 

    Byte3 Byte2 Byte1 Byte0

will be arranged in memory as follows: 
    Base Address+0   Byte0
    Base Address+1   Byte1
    Base Address+2   Byte2
    Base Address+3   Byte3

Intel processors (those used in PC's) use "Little Endian" byte order.  "Big
Endian" means that the high-order byte of the number is stored in memory at
the lowest address, and the low-order byte at the highest address. (The big
end comes first.) Our LongInt, would then be stored as: 

    Base Address+0   Byte3
    Base Address+1   Byte2
    Base Address+2   Byte1
    Base Address+3   Byte0

Motorola processors (those used in Mac's) use "Big Endian" byte order.  Which
is Better?

You may see a lot of discussion about the relative merits of the two formats,
mostly religious arguments based on the relative merits of the PC versus the
Mac. Both formats have their advantages and disadvantages.

In "Little Endian" form, assembly language instructions for picking up a 1, 2,
4, or longer byte number proceed in exactly the same way for all formats:
first pick up the lowest order byte at offset 0. Also, because of the 1:1
relationship between address offset and byte number (offset 0 is byte 0),
MULTIPLE PRECISION MATH ROUTINES ARE CORRESPONDINGLY EASY TO WRITE.

In "Big Endian" form, by having the high-order byte come first, YOU CAN ALWAYS
TEST WHETHER THE NUMBER IS POSITIVE OR NEGATIVE BY LOOKING AT THE BYTE AT
OFFSET ZERO. You don't have to know how long the number is, nor do you have to
skip over any bytes to find the byte containing the sign information. The
numbers are also stored in the order in which they are printed out, so binary
to decimal routines are particularly efficient.

What does that Mean for Us?

What endian order means is that any time numbers are written to a file, you
have to know how the file is supposed to be constructed. If you write out a
graphics file (such as a .BMP file) on a machine with "Big Endian" integers,
you must first reverse the byte order, or a "standard" program to read your
file won't work.

