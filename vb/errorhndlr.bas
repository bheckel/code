''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'     Name: errorhndlr.bas
'
'  Summary: Several quick error handlers for VBA.  Best version is probably 
'           at bottom.  If use line #s, can determine which line errored via
'           Erl.  Can use the utility nl under bash to number intelligently.
'
'           MAKE SURE TO ENABLE SCREENUPDATING AT THE POINT YOU FALL INTO THE
'           ERROR TRAP!
'
'  Created: Tue Jun 08 1999 12:21:54 (Bob Heckel)
' Modified: Tue 19 Aug 2003 13:57:23 (Bob Heckel)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' Ignore errors:
Sub IDontCare
  On Error Resume Next  ' execute next line of code following the error
  Kill sFile
End Sub


' Simple.
MsgBox Err.Description & vbCrLf & Err.Number


' See demo below...

' *****Paste 1:
  On Error GoTo ENTROPY
  Dim sMsg as String

' *****Paste 2:
' Single exit point.
DAMAGEDEXIT:
  Exit Sub Function

ENTROPY:
  If Err.Number <> 0 Then
    sMsg = "Error # " & Str(Err.Number) & " was generated by " _
              & Err.Source & Chr(13) & "Description: " & Err.Description
  MsgBox sMsg, , "An error has occurred in <Sub or Function> " & _
         "<Name unspecified>. " & Erl, Err.Helpfile, Err.HelpContext
  End If
  Resume DAMAGEDEXIT
' DON'T FORGET TO CHANGE <these> IF NECESSARY.
' ALSO EXIT SUB MAY NEED TO BE EXIT FUNCTION.
' TODO pass parameters.

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' DEMO
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Sub ForceErrorDemo()
  Dim sMsg as String

  On Error GoTo ENTROPY
  ' Force Overflow error.
  Err.Raise 6

' Single exit point.
DAMAGEDEXIT:
  Exit Sub

ENTROPY:
  If Err.Number <> 0 Then
    sMsg = "Error # " & Str(Err.Number) & " was generated by " _
              & Err.Source & Chr(13) & "Description: " & Err.Description
    MsgBox sMsg, , "An error has occurred in <Sub or Function> " & _
           "<Name unspecified>. " & Erl, Err.Helpfile, Err.HelpContext
  End If
  Resume DAMAGEDEXIT
End Sub





'''''''''''''''''''
' Or, 
'''''''''''''''''''

' Paste to line below Sub... (or Function...)
  On Error GoTo BOBHERRHANDLER

' Paste to each Sub or Function:
' other code...blah blah blah... (make sure next line is exit FUNCTION if 
' applicable)



Exit Sub
BOBHERRHANDLER:
  Dim sFailure As String
  sFailure = "BottomRow"
  Application.ScreenUpdating = True
  Call ImplosionError(sFailure, True)
End Function

' Paste to end of Module:
Function ImplosionError( _
                         Optional strProc As String = "<unknown>", _
                         Optional fRespond As Boolean = False, _
                         Optional objErr As ErrObject _
                        ) As Boolean
    ' Generic error handling routine that displays
    ' the error information in a dialog box.
    ' In:
    '   strProc: Name of the procedure calling this function
    '   fRespond: If True the dialog includes OK and Cancel buttons
    '   objErr: VBA ErrObject containing error information (optional)
    ' Out:
    '   Return Value: True if the user clicks the OK button, False otherwise
    ' Example: Call ImplosionError("ThisProc", True)
    Dim strMessage As String
    Dim strTitle As String
    Dim intStyle As Integer
    
    ' If the user didn't pass an ErrObject, use Err.
    If objErr Is Nothing Then
      Set objErr = Err
    End If
    
    ' If there is an error, process it otherwise just return True.
    If objErr.Number = 0 Then
      ImplosionError = True
    Else
      ' Build title and message.
      strTitle = "Error " & objErr.Number & _
       " in " & strProc
      strMessage = "The following error has occurred:" & _
       vbCrLf & vbCrLf & objErr.Description & "  See Bob before proceeding."
        
      ' Set the icon and buttons for MsgBox.
      intStyle = vbExclamation
      If fRespond Then
        intStyle = intStyle Or vbOKCancel
      End If
        
      ' Display message and return result.
      ImplosionError = (MsgBox(strMessage, intStyle, strTitle) = vbOK)
    End If
End Function



'''''''''''''''''''
' Or, 
'''''''''''''''''''

' "From: ""Graham Howe"" <graham@gha.u-net.com>"
' "Date: Fri, 1 May 1998 15:48:56 +0100"
' Newsgroups: microsoft.public.excel.programming

' Here's a bit of code I use to check for required files before continuing
' with a fairly complex macro.

' The function is simply called from anywhere with the path and
' filename in the variable p. The FileExists variable is set up as a public
' variable so that I can use it in multiple sub routines.

Function FileExists(p)
  On Error GoTo FileErrorHandler
  If Dir(p) <> "" Then
    FileExists = 1
  Else
    FileExists = 0
  End If
FileErrorOccured:
Exit Function    ' Exit Sub before error handler.

FileErrorHandler:   ' Error-handling routine.
  Select Case Err ' Evaluate Error Number.
      Case 68 ' "Device Unavailable" error.
        FileExists = 0
        GoTo FileErrorOccured
      Case Else
        ' Handle other situations here...
  End Select
  Resume  ' Resume execution at same line that caused the error.
End Function





'''''''''''''''''''
' Or,  maybe best of all
'''''''''''''''''''

Option Explicit
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'    Name:  errorhandler.bas
'
' Summary:  Centralized error processing.
'           Sample call:
'         Dim moreinfo As String
'         moreinfo = "Make sure the file " & CONFIGDAT & " exists."
'         Call Entropy(Err.Number, Err.Source, Err.Description, Err.HelpFile, _
'                      Err.HelpContext, "ProcessConfigsub", moreinfo)
'
' Created: Fri, 10 Nov 2000 09:40:01 (Bob Heckel)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Sub Entropy(errnumb As Integer, errsource As String, _ 
                   errdesc As String, errhelp As Variant, _ 
                   errhelpcontext As Variant, subname As String, _
                   Optional optmsg As String = "none", _ 
                   Optional erlcode As Variant)
  Dim msgstr As String

  msgstr = "Error # " & Str(errnumb) & " was generated by " _
         & errsource & Chr(13) & "Description: " & Err.Description & _
         Chr(13) & "Additional information: " & optmsg

  ' Erl is only available if source code is numbered.
  If Not IsMissing(erlcode) Then
    MsgBox msgstr, , "An error has occurred in Sub " & subname & "() " & _
           Erl, Err.HelpFile, Err.HelpContext
  Else
    MsgBox msgstr, , "An error has occurred in Sub " & subname & "() ", _
           Err.HelpFile, Err.HelpContext
  End If
End Sub

