#!/usr/bin/perl

# Modified: Tue 09 May 2017 08:32:55 (Bob Heckel)

# To do multiple log files:
# for f in $(find . -name '*.log'); do echo $f; saslog_grep.pl $f | grep ERROR; done;

use strict;
use warnings;

die "Usage: $0 [-sloppyflag] saslogfile.log\n" if $#ARGV < 0;

# Optional hide sloppy coding (or custom NOTE:) flag
my $sloppyflag;
my $file;
# We only want to see an error line once
my %seen = ();

# TODO use standard arg parsing
if ( $ARGV[1] ) {
  $sloppyflag = $ARGV[0];
  $file = $ARGV[1];
} else {
  $file = $ARGV[0];
  $sloppyflag = '';
}

print "$ENV{ATEB_STACK} $ENV{ATEB_TIER}\n";
open my $fh, '<', $file or die "Could not open '$file' $!\n";
 
### print "~~~~~~~ $file ~~~~~~\n\n";
if ( -f "/mnt/nfs/home/bheckel/bin/myls" ) {
  system "/mnt/nfs/home/bheckel/bin/myls $file";
}

# TODO use a seen hash to print err line only once
while (my $line = <$fh>) {
  chomp $line;

  # TODO use a switch for NOTEs
  #next unless $line =~ /NOTE:|WARNING:|ERROR:/;
  next unless $line =~ /^WARNING:|^ERROR:|NOTE:.*rows were inserted into/;

  # These are usually safe to ignore
  next if $line =~ /NOTE: \+\+\+\+/;
  next if $line =~ /NOTE: Additional host information/;
  next if $line =~ /NOTE: All profile changes will be lost/;
  next if $line =~ /NOTE: All registry changes will be lost/;
  next if $line =~ /NOTE: AUTOEXEC processing (beginning|completed)/;
  next if $line =~ /NOTE: BASE data set does not exist. DATA file is being copied to BASE file/;
  next if $line =~ /NOTE: Compressing data set/;
  next if $line =~ /NOTE: Compression was disabled for data set/;
  next if $line =~ /NOTE: Copyright \(c\) 2/;
  next if $line =~ /NOTE: (DATA statement|The SAS System) used/;
  next if $line =~ /NOTE: DATA STEP view saved on file/;
  next if $line =~ /NOTE: Deleting|Appending/;
  next if $line =~ /NOTE: \d+ observations with duplicate key values were deleted/;
  next if $line =~ /NOTE: \d+ record was read from the infile/;
  next if $line =~ /NOTE: Enter greplay commands or statements\./;
  next if $line =~ /NOTE: Fileref .+ has been deassigned./;
  next if $line =~ /NOTE: File WORK.PROFILE (memtype=\w+) cannot be deleted because it is in use/;
  next if $line =~ /NOTE:.*he DATA step printed/;
  next if $line =~ /NOTE: Input data set is already sorted/;
  next if $line =~ /NOTE: Line generated by the CALL EXECUTE routine/;
  next if $line =~ /NOTE: Line generated by the (invoked|macro)/;
  next if $line =~ /NOTE:.* lines were written to file PRINT/;
  next if $line =~ /NOTE:.*observations added/;
  next if $line =~ /NOTE: Processing beginning for XCHART statement number/;
  next if $line =~ /NOTE: Processing beginning for XSCHART statement/;
  next if $line =~ /NOTE: PROC SQL statements are executed immediately/;
  next if $line =~ /NOTE:  RECORDS WRITTEN TO/;
  next if $line =~ /NOTE: SAS initialization used/;
  next if $line =~ /NOTE: SAS Institute Inc., SAS Campus Drive/;
  next if $line =~ /NOTE: SAS \(r\) Proprietary/;
  next if $line =~ /NOTE: SAS sort was used/;
  next if $line =~ /NOTE: Sorting was performed by the data source/;
  next if $line =~ /NOTE: Statement transforms to/;
  next if $line =~ /NOTE: Table \w+\.\w+ created, with/;
  next if $line =~ /NOTE: TAGSET 'Tagsets/;
  next if $line =~ /NOTE: The data set.*has \d+/;
  next if $line =~ /NOTE: The infile \w+ is:/;
  next if $line =~ /NOTE: The PROCEDURE \w+ printed/;
  next if $line =~ /NOTE: There were [0-9]+ observations read from/;
  next if $line =~ /NOTE: This session is executing on/;
  next if $line =~ /NOTE: Unable to open SASUSER.PROFILE/;
  next if $line =~ /NOTE: Unable to open SASUSER.REGSTRY/;
  next if $line =~ /NOTE: Updated analytical products/;
  next if $line =~ /NOTE: .* used \(Total process time\)/;
  next if $line =~ /NOTE: .+ was successfully/;
  next if $line =~ /NOTE: Writing (HTML|ODS PDF|RTF) (Body|Contents|Frames|output)/;
  next if $line =~ /NOTE: Writing TAGSETS/;
  next if $line =~ /%put NOTE:/;
  next if $line =~ /%put ERROR:/;
  next if $line =~ /%put WARNING:/;
  next if $line =~ /WARNING: Apparent symbolic reference _METAUSER not resolved/;
  next if $line =~ /WARNING:.*associated will be expiring soon/;
  next if $line =~ /WARNING: Compression was disabled for data set/;
  next if $line =~ /WARNING: Unable to copy SASUSER registry to WORK registry/;
  next if $line =~ /WARNING: Your system is scheduled to expire/;
  next if $line =~ /ERROR: The connection to the X display server/;
  next if $line =~ /ERROR: Errors printed on page/;
  next if $line =~ /WARNING: Limit set by ERRORS= option reached/;
  if ( $sloppyflag ne '' ) {
    # print "$ENV{ATEB_STACK} $ENV{ATEB_TIER}\n";
    # Probably safe to ignore
    next if $line =~ /NOTE: A CASE expression has no ELSE clause./;
    next if $line =~ /NOTE: Data was saved in/;
    next if $line =~ /NOTE: \d+ record was written to the file/;
    next if $line =~ /NOTE: Invalid \w+ argument to function SUBSTR/;
    next if $line =~ /NOTE: Missing values were generated as a result of performing an operation on missing values/;
    next if $line =~ /NOTE: Numeric values have been converted to character/;
    next if $line =~ /NOTE: The file \w+ is:/;
    next if $line =~ /NOTE: The query requires remerging summary statistics back with the original data/;
    next if $line =~ /NOTE: Variable \w+ is uninitialized./;
    next if $line =~ /put 'ERROR:/;
    next if $line =~ /WARNING: Data too long for column/;
    next if $line =~ /WARNING: The Base SAS Software product with which/;
    # Ateb safe to ignore
    next if $line =~ /NOTE: start options_healthplan/;
    next if $line =~ /NOTE: macro variable date_file is null/;
    next if $line =~ /NOTE: step skipped/;
    next if $line =~ /NOTE: macro variable/;
    next if $line =~ /NOTE: Folder Directory Structure/;
    next if $line =~ /NOTE: Drugs/;
    next if $line =~ /NOTE: \|/;
    next if $line =~ /NOTE: \/Drugs\/HealthPlans/;
    next if $line =~ /WARNING: INTO Clause :itm1/;
    next if $line =~ /NOTE: start options_/;
    next if $line =~ /NOTE: executed by/;
    next if $line =~ /NOTE: Folder Structure:/;
    next if $line =~ /NOTE: Immunization/;
    next if $line =~ /NOTE: \/Drugs.* started/;
    next if $line =~ /NOTE: Format .* has been output/;
    next if $line =~ /NOTE: (start|stop).*/;
    next if $line =~ /NOTE: Eligibility File/;
    next if $line =~ /NOTE: PILOT*/;
    next if $line =~ /NOTE: No patient/;
    next if $line =~ /NOTE: No state ex/;
    next if $line =~ /NOTE: Store Ex/;
    next if $line =~ /NOTE: Capping was/;
    next if $line =~ /NOTE: Keep .* Patients/;
    next if $line =~ /NOTE: data set data\./;
    next if $line =~ /NOTE: Depulicate/;
    next if $line =~ /NOTE: At least one nonessential ordering column reference has been removed from/;
    next if $line =~ /NOTE: Remove patients who is with certain/;
    next if $line =~ /NOTE: TMMEligib/;
    next if $line =~ /WARNING: Libref SASDATA may not have assigned correctly from logical server/;
    next if $line =~ /NOTE: Libref \w+ successfully assigned from logical server./;
    next if $line =~ /NOTE: Libref BUILD\w? refers to the same physical library as TMMDATA1/;
    next if $line =~ /NOTE: \/sasdata\/Cron\/Daily\/cce\/cce_2000000.sas/;
    next if $line =~ /NOTE: Libref.*same physical library as (TMMDATA1|FUNCDATA)/;
    next if $line =~ /^(NOTE|WARNING): Libref (funcdata|TMMDATA1|BUILD) may not have assigned correctly from logical server/;
    next if $line =~ /NOTE: Variable 'Disease State'n is uninitiali/;
    next if $line =~ /NOTE: .* Exclusion Applied/;
    next if $line =~ /WARNING: Libref funcdata may not have assigned correctly/;
    next if $line =~ /WARNING: Multiple lengths were specified for the variable/;
    next if $line =~ /WARNING: This CREATE TABLE statement recursively references the target table/;
    next if $line =~ /WARNING: CPATID.CPATID/;
  }

  unless ( $seen{$line} ) {
    $seen{$line} = 1;
    print "$line\n";
  }
}
print "\n";
