<html>
<!-- OWNER_NAME="Özgür Kesim" -->
<!-- OWNER_INFO="Free University Berlin, Dept of Mathematics" -->
<head>
<title>
rxvt - FAQ
</title>
</head>

<body>

                  <center><h1>rxvt - FAQ</h1></center>
<small>

Created: Wed May 14 16:41:54 MET DST 1997<br>
Last update: Wed May 14 16:42:41 MET DST 1997
</small>
<hr>
<p>


<dl>
	<dt><h3>
	How do i know which rxvt version i'm using?
	</h3><dd>the version number is displayed with the usage (-help).      
	for rxvt version 2.14 and later, the escape sequence `esc[8n'
	sets the window title to the version number.                 
	<p>

	<hr>
	<dt><h3>
	Mouse cut/paste suddenly no longer works.
	</h3><dd>
	make sure that mouse reporting is actually turned off since
	killing some editors prematurely may leave the mouse in mouse
	report mode.  i've heard that tcsh may use mouse reporting
	unless it otherwise specified.  a quick check is to see if
	cut/paste works when the alt or shift keys are depressed. see
	doc/rxvt.ref.
	<p>

	<hr>
	<dt><h3>
	What's with this bold/blink stuff?  i can never get blinking text!
	</h3><dd>
	it is not possible, and likely will never be, for rxvt to have
	actual blinking text. instead (if rxvt was compiled without
	no_boldcolor), bold/blink attributes are used to set high-intensity
	foreground/background colors ... like what you'd see on a pc video
	adapter.  there are programs, notably john davis' slang-based ones
	<ftp://space.mit.edu/pub/davis>, that use bold/blink attributes to
	permit 16 colors.
	<p>
	color0-7 are the low-intensity colors.
	color8-15 are the corresponding high-intensity colors.
	<p>
	a side issue of this bold/blink stuff is the question of how the
	normal default foreground/background colors are to be treated.  if
	the default foreground/background match one of the low-intensity
	colors (color0-7), the bold/blink attribute will invoke the
	appropriate high-intensity color (color8-15).
	<p>
	in the case that the default foreground doesn't match one of the
	low-intensity colors, the bold attribute will use an `overstrike'
	to simulate a bold font. but note this leaves pixel-droppings and
	so, rather than wasting an inordinate amounts of energy to fix it,
	its use is simply deprecated.
	<p>
	in the case that the default background doesn't match one of the
	low-intensity colors, the blink attribute is simply ignored
	(rather than representing it as bold as xterm does).

	<hr>
	<dt><h3>
	I don't like the screen colors.  how do i change them?
	</h3><dd>
	you can change the screen colors at run-time using ~/.xdefaults
	resources (or as long-options) ... see the man-page.
	<p>
	here are values that are supposed to resemble a vga screen,
	including the murky brown that passes for low-intensity yellow:
	<pre>
		rxvt*color0:	#000000
		rxvt*color1:	#a80000
		rxvt*color2:	#00a800
		rxvt*color3:	#a8a800
		rxvt*color4:	#0000a8
		rxvt*color5:	#a800a8
		rxvt*color6:	#00a8a8
		rxvt*color7:	#a8a8a8

		rxvt*color8:	#000054
		rxvt*color9:	#ff0054
		rxvt*color10:	#00ff54
		rxvt*color11:	#ffff54
		rxvt*color12:	#0000ff
		rxvt*color13:	#ff00ff
		rxvt*color14:	#00ffff
		rxvt*color15:	#ffffff
	</pre>
	<p> 

	<hr>
	<dt><h3>
	What's with the strange backspace/delete key behaviour?
	</h3><dd>
	assuming that the physical backspace key corresponds to the
	backspace keysym (not likely for linux ... see the following
	question) there are two standard values that can be used for
	backspace: ^h and ^?.
	<p>
	rxvt tries to inherit the current stty settings and uses the value
	of `erase' to guess the value for backspace.  if rxvt wasn't started
	from a terminal (say, from a menu or by remote shell), then the
	system value of `erase', which corresponds to cerase in <termios.h>,
	will be used (which may not be the same as your stty setting).
	<p>

	for starting a new rxvt:
	<dl>
	<dt> 
	    use backspace = ^h
	<dd>
	<pre>
		$ stty erase ^h
		$ rxvt
	</pre><p>

	<dt>
	    use backspace = ^?
	<dd><pre>
		$ stty erase ^?
		$ rxvt
	</pre>
	<p> 

	</dl>
	<p>
	nb: generate either value with backspace and ctrl/shift-backspace.
	    toggle with "esc[36h" / "esc[36l" as documented in "doc/rxvt.ref"

	for an existing rxvt:
	<dl>

	<dt> 
	    use backspace = ^h
	<dd><pre>
		$ stty erase ^h
		$ echo -n "^[[36h"
	<p></pre>

	<dt>
	    use backspace = ^?
	<dd><pre>
		$ stty erase ^?
		$ echo -n "^[[36l"
	</pre>
	<p> 

	</dl>
	<p>
	this helps satisfy some of the backspace discrepancies that occur,
	but if you use backspace = ^?, make sure that the termcap/terminfo
	value properly reflects that.
	<p>
	the delete key (which one would expect to emit ^?) is a another
	casualty of the ill-defined backspace problem.  to avoid confusion
	between the backspace and delete keys, the delete key has been
	assigned an escape sequence to match the vt100 for execute (esc[3~)
	and is in the supplied termcap/terminfo.
	<p>
	some other backspace problems:
	<ul>
	<li>some editors use termcap/terminfo,
	<li>some editors (vim i'm told) expect backspace = ^h,
	<li>gnu emacs (and emacs-like editors) use ^h for help.
	</ul>
	<p>
	perhaps someday this will all be resolved in a consistent manner<br>
	... and maybe xterm will have home/end values too!
	<p> 

	<hr>
	<dt><h3>
	Why doesn't the backspace key work on my linux machine?
	</h3><dd>
	the xfree86 server has a notorious problem of mapping the backspace
	key as delete in order to match the linux console.
	<p>
	the correct way to fix this:
	<ol>
	<li> complain to your linux distributer and the xfree86 team, maybe
	they'll fix it.
	<li>use xmodmap to correct the backspace mapping
	<pre>
		! ~/.xmodmap

		! a correctly-mapped backspace
		keycode 22 = backspace

		*** make sure the keycode above matches the physical
		    backspace key on your machine!! (use xev) ***
	</pre>
	<p>
	this will also fix the backspace problem with motif applications,
	such as ``why doesn't backspace work for netscape?''
	<p>
	you now have a backspace key that functions as described in the
	previous question.
	<p>

	you may also want to fix the regular xterm if it doesn't
	generates the desired value for backspace
	<pre>
		xterm*vt100.translations: #override \
		<key>backspace: string(\010) \n
	</pre>
	or
	<pre>
		xterm*vt100.translations: #override \
		<key>backspace: string(\177) \n
	</pre>

	while you are at it, you may also want to have consistent
	values to home/end/delete
	<pre>
		xterm*vt100.translations: #override \
		<key>home:	string("\033[7~") \n\
		<key>end:	string("\033[8~") \n\
		<key>delete:	string("\033[3~") \n
	</pre>
	</ol>
	finally, you can also remap the rxvt key-binding at run-time (next
	question) but you'll lose the ability to have ctrl/shift-backspace
	work differently as well as losing the escape sequence toggling of
	backspace.
	<p> 

	<hr>
	<dt><h3>
	I don't like the key-bindings.  how do i change them?
	</h3><dd>
	there are some compile-time selections available in "feature.h"
	and if you've compiled with KEYSYM_RESOURCE + FAKE_RESOURCES you
	can use the `keysym' resource to alter the keystrings associated
	with keysym 0xFF00 - 0xFFFF (function, cursor keys, etc).
	<p>
	Here's an example for a tn3270 session started using
	`rxvt -name tn3270'
	<pre>
		!#  ----- special uses ------:
		! tn3270 login, remap function and arrow keys.
		tn3270*font:	*clean-bold-*-*--15-*

		! keysym - used by rxvt only
		! Delete - ^D
		tn3270*keysym.0xFFFF:	\004

		! Home - ^A
		tn3270*keysym.0xFF50:	\001
		! Left - ^B
		tn3270*keysym.0xFF51:	\002
		! Up - ^P
		tn3270*keysym.0xFF52:	\020
		! Right - ^F
		tn3270*keysym.0xFF53:	\006
		! Down - ^N
		tn3270*keysym.0xFF54:	\016
		! End - ^E
		tn3270*keysym.0xFF57:	\005

		! F1 - F12
		tn3270*keysym.0xFFBE:	\e1
		tn3270*keysym.0xFFBF:	\e2
		tn3270*keysym.0xFFC0:	\e3
		tn3270*keysym.0xFFC1:	\e4
		tn3270*keysym.0xFFC2:	\e5
		tn3270*keysym.0xFFC3:	\e6
		tn3270*keysym.0xFFC4:	\e7
		tn3270*keysym.0xFFC5:	\e8
		tn3270*keysym.0xFFC6:	\e9
		tn3270*keysym.0xFFC7:	\e0
		tn3270*keysym.0xFFC8:	\e-
		tn3270*keysym.0xFFC9:	\e=

		! map Prior/Next to F7/F8
		tn3270*keysym.0xFF55:	\e7
		tn3270*keysym.0xFF56:	\e8
	</pre>
	<p> 

	<hr>
	<dt><h3>
	I'm using keyboard model XXX that has extra Prior/Next/Insert keys.
	How do I make use of them?  For example, the Sun Keyboard type 4
	has the following mappings that rxvt doesn't recognize.
	<pre>
		KP_Insert == Insert
		F22 == Print
		F27 == Home
		F29 == Prior
		F33 == End
		F35 == Next
	</pre>
	</h3><dd>
	Rather than have rxvt try to accomodate all the various possible
	keyboard mappings, it is better to use `xmodmap' to remap the
	keys as required for your particular machine.
	<p> 

	<hr>
	<dt><h3>
	How do I distinguish if I'm running rxvt or a regular xterm?
	I need this to decide about setting colors etc.
	</h3><dd>
	rxvt always exports the variable "COLORTERM", so you can check and
	see if that is set.  Note that several programs, JED, slrn, Midnight
	Commander automatically check this variable to decide whether or not
	to use color.
	<p> 

	<hr>
	<dt><h3>
	How do I set the correct, full IP address for the DISPLAY variable?
	</h3><dd>
	If you've compiled rxvt with DISPLAY_ENV_AND_ANSWER_IS_IP then it is
	possible to use the following shell script snippets to correctly set
	the display.  If your version of rxvt wasn't also compiled with
	ESCZ_RXVT_ANSWER (as assumed in these snippets) then the COLORTERM
	variable can be used to distinguish rxvt from a regular xterm.
	<p>
	Courtesy of Chuck Blake <cblake@BBN.COM> with the following shell
	script snippets:

	<pre>
	# Bourne/Korn/POSIX family of shells:
	[ ${TERM:-foo} = foo ] && TERM=xterm # assume an xterm if we don't know
	if [ ${TERM:-foo} = xterm ]; then
	    stty -icanon -echo min 0 time 15 # see if enhanced rxvt or not
	    echo -n '^[Z'
	    read term_id
	    stty icanon echo
	    if [ ""${term_id} = '^[[?1;2C' -a ${DISPLAY:-foo} = foo ]; then
		echo -n '^[[7n'		# query the rxvt we are in for the DISPLAY string
		read DISPLAY		# set it in our local shell
	    fi
	fi
	</pre>
	csh/tcsh family of shells:
	<pre>
	if ( !(${?TERM}) ) then		# if term is unset, we are probably in an xterm
	    TERM = xterm
	endif
	if ( ${TERM} =~ xterm ) then
	    stty -icanon -echo min 0 time 15   # see if enhanced rxvt or not
	    echo -n '^[Z'
	    set term_id=$<
	    stty icanon echo
	    if ( ""${term_id} == "^[[?1;2C" && ${?DISPLAY} == 0 ) then
		echo -n '^[[7n'		# query the rxvt we're in for the DISPLAY string
		setenv DISPLAY "$<"	# set it in our local shell
	    endif
	endif
	</pre>
	<p>

</dl>

</body>
