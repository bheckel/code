--  Created: 20-Jun-2019 (Bob Heckel) 
-- Modified: 21-Nov-2022 (Bob Heckel)

---

-- No sequence or trigger to maintain. We can be lazy and let the database give us the ID value, or we can be 
-- particular and supply it ourselves.
CREATE TABLE zbob (
  econtact_id  NUMBER generated BY DEFAULT ON NULL AS identity ( START WITH 10 INCREMENT BY 10 CACHE 20 ) PRIMARY KEY,
  employee_id  NUMBER NOT NULL,
  first_name   VARCHAR2(20) NOT NULL,
  last_name    VARCHAR2(20) NOT NULL,
  phone        VARCHAR2(12) NOT NULL--,
  --FOREIGN KEY(employee_id) REFERENCES employees_bak(employee_id) ON DELETE CASCADE
);

insert into zbob values (13, 12, 'b', 'h', '34');
insert into zbob (employee_id, first_name, last_name, phone) values (12, 'b', 'h', '34');
SELECT * FROM user_constraints WHERE constraint_name='SYS_C00110556' ;
select * from zbob;
drop table zbob;

---

CREATE TABLE rion_37551 AS SELECT * FROM email_messages WHERE 1 = 0;

-- DB always has 2 as the last digit of NEXTVAL
CREATE SEQUENCE UID_RION_37551 MINVALUE 2 MAXVALUE 999999999999999999999999999 INCREMENT BY 10  START WITH 12 CACHE 20 NOORDER NOCYCLE;

INSERT INTO RION_37551 (EMAIL_MESSAGES_ID, subject) VALUES (uid_RION_37551.NEXTVAL, 'test'); COMMIT;

SELECT UID_RION_37551.NEXTVAL FROM dual -- 12 22 32 42...
SELECT * FROM RION_37551;
DROP SEQUENCE UID_RION_37551;
DROP TABLE RION_37551;

---

PROCEDURE generateSeq IS
	lastSeq NUMBER;
			
	BEGIN
		--TODO add exception handler
		EXECUTE IMMEDIATE 'drop sequence seq30537';
		
		--TODO
		-- Try to avoid collisions with others committing by adding 100
		SELECT MAX(ref_corporate_initiative_id) + 100 INTO lastSeq FROM z_bob_ref_corporate_initiative;
		
		IF lastSeq IS NULL THEN lastSeq := 1; END IF;
		
		DBMS_OUTPUT.put_line('start with lastSeq: ' || lastSeq);
		
		EXECUTE IMMEDIATE 'CREATE SEQUENCE seq30537 INCREMENT BY 1 START WITH ' || lastSeq || ' MAXVALUE 999999999 MINVALUE 1 NOCACHE';
END;
