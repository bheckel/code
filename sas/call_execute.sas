options nosource;
 /*---------------------------------------------------------------------------
  *     Name: call_execute.sas
  *
  *  Summary: Conditionally generate SAS code or a macro from a SAS pgm.  
  *           The parameters to call execute() are executed AFTER the datastep
  *           runs.
  *
  *           A great way to generate code from data in a data set, or in other
  *           words, when parameter values are found in data rather than
  *           supplied with the call of a macro. 
  *
  *           
  *           It is important to know that macro references within CALL EXECUTE
  *           are executed immediately, but SAS language statements within CALL
  *           EXECUTE do not execute until after the data step containing CALL
  *           EXECUTE is executed. SAS statements generated by macros also
  *           execute after the data step has executed. That is why you cannot
  *           use CALL EXECUTE to invoke a macro that contains references to
  *           macro variables created by CALL SYMPUT in that macro.
  *
  *           Also see forceglobalscope.sas
  *
  *  Adapted: Fri 21 Feb 2003 17:17:33 (Bob Heckel -- SAS Tips & Techniques Phil Mason, SAS Users blog, support.sas.com)
  * Modified: Wed 14 May 2014 10:48:46 (Bob Heckel)
  *---------------------------------------------------------------------------
  */
options source NOreplace;

%macro m(clid=);
  %put &clid;
%mend;

data _null_;
  set FUNCDATA.tmm_targeted_list_refresh(keep= clid projected_build_date obs=5);
  str = cats('%m(clid=', clid, ');');
  put str=;
  call execute(str);
run;  



endsas;
data a;
  value='Foo'; output;
  value='Bar'; output;
run;

%macro test(val);
  data _null_;
    call symput('num', 200);
  run;

  %if &num eq 200 %then %do;
    proc print data=&val; run;
  %end;
%mend;

/* Fails */
/*
data _null_;
  temp='a';
  call execute('%test('||temp||')');
run;
*/

data _null_;
  temp='a';
  call execute('%nrstr(%test('||temp||'))');
  /* same */
  rc=dosubl(          '%test('||temp||')' );
run;



endsas;
call execute( '%write_metadata_files(fpath=' || fpath || ', fn=' || pdfname || ',  dt=May 2015, storeid=' || storeid || ', aid=' || aid || ')' );



 /* This fails because macro executes before any data step logic is evaluated.
  * It will always execute, ignoring the IF.  Also hospital_id will be passed
  * as a text string, not the value of the var:
  *
  *  if first.hospital_id then do;
  *    %mymacro(hospital_id);
  *  end;
  */

data hospitals;                                                
  input hospital_id $ quarter number_of_patients;                               
  datalines;                                      
A100 1 125                                    
A100 2 115                                                                                                                              
A100 3 130                                                                                                                              
A200 1 200                                                                        
A200 2 195 
A200 3 180                                                        
;                                                

%macro mymacro(hosp_id);                                                                                                                
  proc export data=hospitals(where=(hospital_id="&hosp_id"))                                                                                  
    outfile="c:\temp\&hosp_id..csv"                                                                                                  
    dbms=csv                                                                                                                              
    replace;                                                                                                                              
  run;                                                                                                                                    
%mend;                                                                                                                                  

data _null_;                                                                                                                            
  set hospitals;                                                                                                                        
  by hospital_id;
  if first.hospital_id then do;
    call execute(cats('%mymacro(',hospital_id,');')); 
  end;                                                                  
run;
endsas;



data junk;
  foo=1;
  bar=2;
  output;
  foo2=3;
  bar2=4;
  output;
run;


 /* Quotes are mandatory when using the string in the data step below. */
%let ok='yes';
data _NULL_;
  if &ok eq 'yes' then
    call execute('proc print data=junk; run;');
run;



 /* Macro must precede CALL EXECUTE in code */
%macro generateStatements;
  %put !!!&reg;
%mend;

data _NULL_;
  set sashelp.shoes(obs=500);
  call symput('reg', trim(region));
  call execute('%generateStatements');
run;




data control;
  input Snap_Date $ 1-8 dsn $ 9-40;
  cards;
20080731TABLEONE           
20080831TABLETWO
20081031TABLETWO
20081031TABLETHREE
  ;
run;
proc sort; by dsn; run;

data _null_;
  set control;
  by dsn;
  if first.dsn then 
    call execute( 'proc spdo library=spds; set acluster admin; cluster create'|| dsn);
    call execute ('mem='|| compress(dsn || '_'|| snap_date) ) ;
  if last.dsn
    then call execute ('maxslot=500; run;') ;
run;
