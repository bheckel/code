<html>
<head><title>www.perl.com - A Short Guide to DBI</title>	
	<meta name="robots" content="index,follow">
	<meta name="description" content="Here's how to get started using SQL and SQL-driven databases from Perl.">
	<meta name="keywords" content="">
	<link href="/perl_a.css" type="text/css" rel="stylesheet">

</head><BODY BGCOLOR="#FFFFFF" LINK="#990000" VLINK="#000066" ALINK="#CCCCCC" TEXT="#000000">
<TABLE BGCOLOR="#6699CC" WIDTH="100%" CELLSPACING="0" CELLPADDING="0" border="0">
<TR>
</TABLE></TD>
</TR>
</TABLE>

<TABLE WIDTH="100%" CELLSPACING="0" CELLPADDING="0" border="0">
<TR>
    <TD WIDTH="147" VALIGN="TOP" NOWRAP><DIV CLASS="navbar">
<TABLE WIDTH="147" BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
</TR></TABLE>
<CENTER>
<TD VALIGN="top" WIDTH="100%">
<P><BR>

<h2>Short guide to DBI (The Perl Database Interface Module)</h2>

<table width="150" cellspacing="0" cellpadding="4" align="right" border="1">
<tr>
<td bgcolor="#0033cc" valign="top" align="center">
<font color="#ffffff">Table of Contents</td>
<tr>
<td width="150" valign="top">
<p class="fine"><font size="1">
&#149;<a href="#About_Relational_Databases_Gener">General information about relational databases</a><br />
&#149;<a href="#About_SQL">About SQL</a><br />
&#149;<a href="#About_Databases">About Databases</a><br />
&#149;<a href="#What_C_DBI_is_For">What DBI is For</a><br />
&#149;<a href="#How_to_Use_C_DBI_">Example of How to Use DBI</a><br />
&#149;<a href="#Explanation_of_the_Example">Explanation of the Example</a><br />
&#149;<a href="#Cached_Queries">Cached Queries</a><br />
&#149;<a href="#Transactions">Transactions</a><br />
&#149;<a href="#Miscellaneous">Miscellaneous</a><br />
</font>
</p>
</td>
</tr>
</table>

by <A HREF=/pub/au/Dominus_Mark-Jason>Mark-Jason Dominus</a><br />
Oct. 22, 1999
<p>

<h3><a name="About_Relational_Databases_Gener">General information about relational databases</a></h3></p>
<p>
Relational databases started to get to be a big deal in the 1970's, and
they're still a big deal today, which is a little peculiar, because they're
a 1960's technology.</p>

<p>
A relational database is a bunch of rectangular tables. Each row of a table
is a record about one person or thing; the record contains several pieces
of information called <em>fields</em>. Here is an example table:

<p>
<pre>
        LASTNAME   FIRSTNAME   ID   POSTAL_CODE   AGE  SEX
        Gauss      Karl        119  19107         30   M
        Smith      Mark        3    T2V 3V4       53   M
        Noether    Emmy        118  19107         31   F
        Smith      Jeff        28   K2G 5J9       19   M
        Hamilton   William     247  10139         2    M
</pre>
<p>
The names of the fields are <code>LASTNAME</code>, <code>FIRSTNAME</code>, <code>ID</code>,
<code>POSTAL_CODE</code>, <code>AGE</code>, and <code>SEX</code>. Each line in the table is a
<em>record</em>, or sometimes a <em>row</em> or <em>tuple</em>. For example, the first row of the table represents a 30-year-old male
whose name is Karl Gauss, who lives at postal code 19107, and whose ID
number is 119.</p>

<p>
Sometimes this is a very silly way to store information. When the
information naturally has a tabular structure it's fine. When it doesn't,
you have to squeeze it into a table, and some of the techniques for doing
that are more successful than others. Nevertheless, tables are simple and
are easy to understand, and most of the high-performance database systems
you can buy today operate under this 1960's model.</p>

<p>

<h3><a name="About_SQL">About SQL</a></h3></p>
<p>
SQL stands for <em>Structured Query Language</em>. It was invented by Oracle in the 1970's. It's a language for describing
searches and modifications to a relational database.</p>

<p>
SQL was a huge success, probably because it's incredibly simple and anyone
can pick it up in ten minutes. As a result, all the important database
systems support it in some fashion or another. This includes the big
players, like Oracle and Sybase, high-quality free or inexpensive database
systems like MySQL, and funny hacks like Perl's
<code>DBD::CSV</code> module, which we'll see later.</p>

<p>
There are four important things one can do with a table:</p>
<p>
<dl>
<dt><strong><a name="item_SELECT">SELECT</a></strong><dd>

Find all the records that have a certain property</p>
<p>
<dt><strong><a name="item_INSERT">INSERT</a></strong><dd>

Add new records</p>
<p>
<dt><strong><a name="item_DELETE">DELETE</a></strong><dd>

Remove old records</p>
<p>
<dt><strong><a name="item_UPDATE">UPDATE</a></strong><dd>

Modify records that are already there
</p>
</dl>
<p>
Those are the four most important SQL commands, also called
<em>queries</em>. Suppose that the example table above is named <code>people</code>. Here are examples of each of the four important kinds of queries:

<p>
<pre>        SELECT firstname FROM people WHERE lastname = 'Smith'
</pre>
<p>
(Locate the first names of all the Smiths.)

<p>
<pre>        DELETE FROM people WHERE id = 3
</pre>
<p>
(Delete Mark Smith from the table)

<p>
<pre>        UPDATE people SET age = age+1 WHERE id = 247
</pre>
<p>
(William Hamilton just had a birthday.)

<p>
<pre>        INSERT INTO people VALUES ('Euler', 'Leonhard', 248, NULL, 58, 'M')
</pre>
<p>
(Add Leonhard Euler to the table.)

<p>
There are a bunch of other SQL commands for creating and discarding tables,
for granting and revoking access permissions, for committing and abandoning
transactions, and so forth. But these four are the important ones.
Congratulations; you are now a SQL programmer. For the details, go to any
reasonable bookstore and pick up a SQL quick reference.</p>


<h2><a name="About_Databases">About Databases</a></h2>
<p>
Every database system is a little different. You talk to some databases over
the network and make requests of the database engine; other databases you
talk to through files or something else.</p> 

<p>
Typically when you buy a commercial database, you get a <em>library</em>
with it. The vendor has written some functions for talking to the database
in some language like C, compiled the functions, and the compiled code is
the library. You can write a C program that calls the functions in the
library when it wants to talk to the database.</p>
<p>
Every vendor's library is different. The names of the functions vary, and
the order in which you call them varies, and the details of passing queries
to the functions and getting the data back out will vary. Some libraries,
like Oracle's, are very thin&#151they just send the query over to the network
to the real database and let the giant expensive real database engine deal
with it directly. Other libraries will do more predigestion of the query,
and more work afterwards to turn the data into a data structure. Some
databases will want you to spin around three times and bark like a chicken;
others want you to stand on your head and drink out of your sneaker.</p>

<p>

<h3><a name="What_C_DBI_is_For">What DBI is For</a></h3>
<p>
There's a saying that any software problem can be solved by adding a layer
of indirection. That's what Perl's <code>DBI</code> (`Database Interface') module is all about. It was written by Tim Bunce.</p>

<p>
<code>DBI</code> is designed to protect you from the details of the vendor libraries. It has
a very simple interface for saying what SQL queries you want to make, and
for getting the results back.  <code>DBI</code> doesn't know how to talk to any particular database, but it does know how
to locate and load in <code>DBD</code> (`Database Driver') modules. The <code>DBD</code> modules have the vendor libraries in them and know how to talk to the real
databases; there is one <code>DBD</code> module for every different database.</p>

<p>
When you ask <code>DBI</code> to make a query for you, it sends the query to the appropriate <code>DBD</code> module, which spins around three times or drinks out of its sneaker or
whatever is necessary to communicate with the real database. When it gets the
results back, it passes them to <code>DBI</code>. Then <code>DBI</code> gives you the results. Since your program only has to deal with <code>DBI</code>, and not with the real database, you don't have to worry about barking
like a chicken.</p>

<p align=center><img src="http://www.perl.com//1999/10/dbi.gif"></p>

<p>
Here's your program talking to the <code>DBI</code> library. You are using two databases at once. One is an Oracle database
server on some other machine, and another is a <code>DBD::CSV</code> database that stores the data in a bunch of plain text files on the local
disk.</p>

<p>
Your program sends a query to <code>DBI</code>, which forwards it to the appropriate <code>DBD</code> module; let's say it's <code>DBD::Oracle</code>.  <code>DBD::Oracle</code> knows how to translate what it gets from <code>DBI</code> into the format demanded by the Oracle library, which is built into it. The
library forwards the request across the network, gets the results back, and
returns them to
<code>DBD::Oracle</code>.  <code>DBD::Oracle</code> returns the results to <code>DBI</code> as a Perl data structure. Finally, your program can get the results from
<code>DBI</code>.</p>

<p>
On the other hand, suppose that your program was querying the text files.
It would prepare the same sort of query in exactly the same way, and send
it to <code>DBI</code> in exactly the same way.  <code>DBI</code> would see that you were trying to talk to the <code>DBD::CSV</code> database and forward the request to the <code>DBD::CSV</code> module. The <code>DBD::CSV</code> module has Perl functions in it that tell it how to parse SQL and how to
hunt around in the text files to find the information you asked for. It
then returns the results to <code>DBI</code> as a Perl data structure. Finally, your program gets the results from <code>DBI</code> in exactly the same way that it would have if you were talking to Oracle
instead.</p>

<p>
There are two big wins that result from this organization. First, you don't
have to worry about the details of hunting around in text files or talking
on the network to the Oracle server or dealing with Oracle's library. You
just have to know how to talk to <code>DBI</code>.</p>

<p>
Second, if you build your program to use Oracle, and then the following
week upper management signs a new Strategic Partnership with Sybase, it's
easy to convert your code to use Sybase instead of Oracle. You change
exactly one line in your program, the line that tells <code>DBI</code> to talk to <code>DBD::Oracle</code>, and have it use <code>DBD::Sybase</code>
instead. Or you might build your program to talk to a cheap, crappy
database like MS Access, and then next year when the application is doing
well and getting more use than you expected, you can upgrade to a better
database next year without changing any of your code.</p>

<p>
There are <code>DBD</code> modules for talking to every important kind of SQL database.  <code>DBD::Oracle</code> will talk to Oracle, and <code>DBD::Sybase</code> will talk to Sybase.  <code>DBD::ODBC</code> will talk to any ODBC database including Microsoft Acesss. (ODBC is a
Microsoft invention that is analogous to
<code>DBI</code> itself. There is no <code>DBD</code> module for talking to Access directly.)  <code>DBD::CSV</code> allows SQL queries on plain text files.
<code>DBD::mysql</code> talks to the excellent MySQL database from TCX DataKonsultAB in Sweden.
(MySQL is a tremendous bargain: It's <code>$200</code> for commercial use,
and free for noncommerical use.)</p>


<h3><a name="How_to_Use_C_DBI_">Example of How to Use <code>DBI</code></a></h3>
<p>
Here's a typical program. When you run it, it waits for you to type a last
name. Then it searches the database for people with that last name and
prints out the full name and ID number for each person it finds. For
example:

<p>
<pre>
        Enter name&gt; Noether
                118: Emmy Noether

        Enter name&gt; Smith
                3: Mark Smith
                28: Jeff Smith

        Enter name&gt; Snonkopus
                No names matched `Snonkopus'.
        
        Enter name&gt; ^D
</pre>
<p>
Here is the code:

<p>
<pre>
        use DBI;

        my $dbh = DBI-&gt;connect('DBI:Oracle:payroll')
                or die &quot;Couldn't connect to database: &quot; . DBI-&gt;errstr;
        my $sth = $dbh-&gt;prepare('SELECT * FROM people WHERE lastname = ?')
                or die &quot;Couldn't prepare statement: &quot; . $dbh-&gt;errstr;

        print &quot;Enter name&gt; &quot;;
        while ($lastname = &lt;&gt;) {               # Read input from the user
          my @data;
          chomp $lastname;
          $sth-&gt;execute($lastname)             # Execute the query
            or die &quot;Couldn't execute statement: &quot; . $sth-&gt;errstr;

          # Read the matching records and print them out          
          while (@data = $sth-&gt;fetchrow_array()) {
            my $firstname = $data[1];
            my $id = $data[2];
            print &quot;\t$id: $firstname $lastname\n&quot;;
          }

          if ($sth-&gt;rows == 0) {
            print &quot;No names matched `$lastname'.\n\n&quot;;
          }

          print &quot;\n&quot;;
          print &quot;Enter name&gt; &quot;;
        }
          
        $sth-&gt;finish;
        $dbh-&gt;disconnect;
</pre>
<p>

<h2><a name="Explanation_of_the_Example">Explanation of the Example</a></h2>
<p>
<pre>        use DBI;
</pre>
<p>
This loads in the <code>DBI</code> module. Notice that we don't have to load in any <code>DBD</code> module.  <code>DBI</code> will do that for us when it needs to.</p>

<p>
<pre>        my $dbh = DBI-&gt;connect('DBI:Oracle:payroll');
                or die &quot;Couldn't connect to database: &quot; . DBI-&gt;errstr;
</pre>
<p>
The <code>connect</code> call tries to connect to a database. The first argument, <code>DBI:Oracle:payroll</code>, tells <code>DBI</code> what kind of database it is connecting to. The <code>Oracle</code> part tells it to load <code>DBD::Oracle</code> and to use that to communicate with the database. If we had to switch to
Sybase next week, this is the one line of the program that we would change.
We would have to change <code>Oracle</code> to <code>Sybase</code>.</p>

<p>
<code>payroll</code> is the name of the database we will be searching. If we were going to
supply a username and password to the database, we would do it in the <code>connect</code> call:
</p>
<p>
<pre>        my $dbh = DBI-&gt;connect('DBI:Oracle:payroll', 'username', 'password');
                or die &quot;Couldn't connect to database: &quot; . DBI-&gt;errstr;
</pre>
<p>
If <code>DBI</code> connects to the database, it returns a <em>database handle</em>
object, which we store into <code>$dbh</code>. This object represents the database connection. We can be connected to
many databases at once and have many such database connection obejcts.</p>

<p>
If <code>DBI</code> can't connect, it returns an undefined value. In this case, we use <code>die</code> to abort the program with an error message.
<code>DBI-&amp;gt;errstr</code> returns the reason why we couldn't connect&#151``Bad password'' for example.
</p>
<p>
<pre>        my $sth = $dbh-&gt;prepare('SELECT * FROM people WHERE lastname = ?')
                or die &quot;Couldn't prepare statement: &quot; . $dbh-&gt;errstr;
</pre>
<p>
The <code>prepare</code> call prepares a query to be executed by the database. The argument is any
SQL at all. On high-end databases, <code>prepare</code> will send the SQL to the database server, which will compile it. If
<code>prepare</code> is successful, it returns a <em>statement handle</em> object which represents the statement; otherwise it returns an undefined
value and we abort the program.  <code>$dbh-&amp;gt;errstr</code> will return the reason for failure, which might be ``Syntax error in SQL''.
It gets this reason from the actual database, if possible.</p>

<p>
The <code>?</code> in the SQL will be filled in later. Most databases can handle this. For
some databases that don't understand the <code>?</code>, the DBD module will emulate it for you and will pretend that the database
understands how to fill values in later, even though it doesn't.</p>

<p>
<pre>        print &quot;Enter name&gt; &quot;;
</pre>
<p>
Here we just print a prompt for the user.

<p>
<pre>        while ($lastname = &lt;&gt;) {               # Read input from the user
          ...
        }
</pre>
<p>
This loop will repeat over and over again as long as the user enters a last
name. If they type a blank line, it will exit. The Perl
<code>&amp;lt;&amp;gt;</code> symbol means to read from the terminal or from files named on the command
line if there were any.</p>

<p>
<pre>          my @data;
</pre>
<p>
This declares a variable to hold the data that we will get back from the
database.</p>

<p>
<pre>          chomp $lastname;
</pre>
<p>
This trims the newline character off the end of the user's input.</p>

<p>
<pre>          $sth-&gt;execute($lastname)             # Execute the query
            or die &quot;Couldn't execute statement: &quot; . $sth-&gt;errstr;
</pre>
<p>
<code>execute</code> executes the statement that we prepared before. The argument <code>$lastname</code> is substituted into the SQL in place of the
<code>?</code> that we saw earlier. <code>execute</code> returns a true value if it succeeds and a false value otherwise, so we
abort if for some reason the execution fails.</p>

<p>
<pre>
           while (@data = $sth-&gt;fetchrow_array()) {
            ...
           }
</pre>
<p>
<code>fetchrow_array</code> returns one of the selected rows from the database. You get back an array
whose elements contain the data from the selected row. In this case, the
array you get back has six elements. The first element is the person's
last name; the second element is the first name; the third element is the
ID, and then the other elements are the postal code, age, and sex.</p>

<p>
Each time we call <code>fetchrow_array</code>, we get back a different record from the database. When there are no more
matching records,
<code>fetchrow_array</code> returns the empty list and the <code>while</code> loop exits.

<p>
<pre>             my $firstname = $data[1];
             my $id = $data[2];
</pre>
<p>
These lines extract the first name and the ID number from the record data.

<p>
<pre>             print &quot;\t$id: $firstname $lastname\n&quot;;
</pre>
<p>
This prints out the result.

<pre>
          if ($sth-&gt;rows == 0) {
            print &quot;No names matched `$lastname'.\n\n&quot;;
          }
</pre>
<p>
The <code>rows</code> method returns the number of rows of the
database that were selected. If no rows were selected, then there is
nobody in the database with the last name that the user is looking
for. In that case, we print out a message.  We have to do this
<em>after</em> the <code>while</code> loop that fetches whatever rows
were available, because with some databases you don't know how many
rows there were until after you've gotten them all.
</p>

<p>
<pre>          print &quot;\n&quot;;
          print &quot;Enter name&gt; &quot;;
</pre>
<p>
Once we're done reporting about the result of the query, we print another
prompt so that the user can enter another name.

<p>
<pre>        $sth-&gt;finish;
        $dbh-&gt;disconnect;
</pre>
<p>
When the user has finished querying the database, they type a blank line
and the main <code>while</code> loop exits.  <code>finish</code> tells the database that we won't need this statement handle any more and it
can forget the SQL in it.  <code>disconnect</code> closes the connection to the database.
</p>


<h3><a name="Cached_Queries">Cached Queries</a></h3>
<p>
Here's a function which looks up someone in the example table, given their
ID number, and returns their age:</p>

<p>
<pre>        sub age_by_id {
          # Arguments: database handle, person ID number
          my ($dbh, $id) = @_;
          my $sth = $dbh-&gt;prepare('SELECT age FROM people WHERE id = ?')
            or die &quot;Couldn't prepare statement: &quot; . $dbh-&gt;errstr;
</pre>
<p>
<pre>          $sth-&gt;execute($id) 
            or die &quot;Couldn't execute statement: &quot; . $sth-&gt;errstr;
</pre>
<p>
<pre>          my ($age) = $sth-&gt;fetchrow_array();
          return $age;
        }
</pre>
<p>
It prepares the query, executes it, and retrieves the result.

<p>
There's a problem here though. Even though the function works correctly,
it's inefficient. Every time it's called, it prepares a new query.
Typically, preparing a query is a relatively expensive operation. For
example, the database engine may parse and understand the SQL and translate
it into an internal format. Since the query is the same every time, it's
wasteful to throw away this work when the function returns.</p>  

<p>
Here's one solution:

<p>
<pre>        { my $sth;
          sub age_by_id {
            # Arguments: database handle, person ID number
            my ($dbh, $id) = @_;
</pre>
<p>
<pre>            if (! defined $sth) {
              $sth = $dbh-&gt;prepare('SELECT age FROM people WHERE id = ?')
                or die &quot;Couldn't prepare statement: &quot; . $dbh-&gt;errstr;
            }
</pre>
<p>
<pre>            $sth-&gt;execute($id) 
              or die &quot;Couldn't execute statement: &quot; . $sth-&gt;errstr;
</pre>
<p>
<pre>            my ($age) = $sth-&gt;fetchrow_array();
            return $age;
          }
        }
</pre>
<p>
There are two big changes to this function from the previous version.
First, the <code>$sth</code> variable has moved outside of the function; this tells Perl that its value
should persist even after the function returns. Next time the function is
called, <code>$sth</code> will have the same value as before.</p>

<p>
Second, the <code>prepare</code> code is in a conditional block. It's only executed if <code>$sth</code> does not yet have a value. The first time the function is called, the <code>prepare</code> code is executed and the statement handle is stored into <code>$sth</code>. This value persists after the function returns, and the next time the
function is called, <code>$sth</code>
still contains the statement handle and the <code>prepare</code> code is skipped.</p>

<p>
Here's another solution:

<p>
<pre>        sub age_by_id {
          # Arguments: database handle, person ID number
          my ($dbh, $id) = @_;
          my $sth = $dbh-&gt;prepare_cached('SELECT age FROM people WHERE id = ?')
            or die &quot;Couldn't prepare statement: &quot; . $dbh-&gt;errstr;
</pre>
<p>
<pre>          $sth-&gt;execute($id) 
            or die &quot;Couldn't execute statement: &quot; . $sth-&gt;errstr;
</pre>
<p>
<pre>          my ($age) = $sth-&gt;fetchrow_array();
          return $age;
        }
</pre>
<p>
Here the only change to to replace <code>prepare</code> with <code>prepare_cached</code>. The <code>prepare_cached</code> call is just like <code>prepare</code>, except that it looks to see if the query is the same as last time. If so,
it gives you the statement handle that it gave you before.</p>



<h3><a name="Transactions">Transactions</a></h3>
<p>
Many databases support <em>transactions</em>. This means that you can make a whole bunch of queries which would modify
the databases, but none of the changes are actually made. Then at the end
you issue the special SQL query <code>COMMIT</code>, and all the changes are made simultaneously. Alternatively, you can issue
the query <code>ROLLBACK</code>, in which case all the queries are thrown away.</p>

<p>
As an example of this, consider a function to add a new employee to a
database. The database has a table called <code>employees</code> that looks like this:

<p>
<pre>
        FIRSTNAME  LASTNAME   DEPARTMENT_ID
        Gauss      Karl       17
        Smith      Mark       19
        Noether    Emmy       17
        Smith      Jeff       666
        Hamilton   William    17
</pre>
<p>
and a table called <code>departments</code> that looks like this:

<p>
<pre>        ID   NAME               NUM_MEMBERS
        17   Mathematics        3
        666  Legal              1
        19   Grounds Crew       1
</pre>
<p>
The mathematics department is department #17 and has three members: Karl
Gauss, Emmy Noether, and William Hamilton.</p>

<p>
Here's our first cut at a function to insert a new employee. It will return
true or false depending on whether or not it was successful:

<p>
<pre>        sub new_employee {
          # Arguments: database handle; first and last names of new employee;
          # department ID number for new employee's work assignment
          my ($dbh, $first, $last, $department) = @_;
          my ($insert_handle, $update_handle);
</pre>
<p>
<pre>          my $insert_handle = 
            $dbh-&gt;prepare_cached('INSERT INTO employees VALUES (?,?,?)'); 
          my $update_handle = 
            $dbh-&gt;prepare_cached('UPDATE departments 
                                     SET num_members = num_members + 1
                                   WHERE id = ?');
</pre>
<p>
<pre>          die &quot;Couldn't prepare queries; aborting&quot;
            unless defined $insert_handle &amp;&amp; defined $update_handle;
</pre>
<p>
<pre>          $insert_handle-&gt;execute($first, $last, $department) or return 0;
          $update_handle-&gt;execute($department) or return 0;
          return 1;   # Success
        }
</pre>
<p>
We create two handles, one for an <code>insert</code> query that will insert the new employee's name and department number into
the <code>employees</code> table, and an <code>update</code> query that will increment the number of members in the new employee's
department in the <code>department</code> table. Then we execute the two queries with the appropriate arguments.
</p>
<p>
There's a big problem here: Suppose, for some reason, the second query
fails. Our function returns a failure code, but it's too late, it has
already added the employee to the <code>employees</code> table, and that means that the count in the <code>departments</code> table is wrong. The database now has corrupted data in it.
</p>
<p>
The solution is to make both updates part of the same transaction. Most
databases will do this automatically, but without an explicit instruction
about whether or not to commit the changes, some databases will commit the
changes when we disconnect from the database, and others will roll them
back. We should specify the behavior explicitly.</p>

<p>
Typically, no changes will actually be made to the database until we issue
a <code>commit</code>. The version of our program with <code>commit</code> looks like this:

<p>
<pre>        sub new_employee {
          # Arguments: database handle; first and last names of new employee;
          # department ID number for new employee's work assignment
          my ($dbh, $first, $last, $department) = @_;
          my ($insert_handle, $update_handle);
</pre>
<p>
<pre>          my $insert_handle = 
            $dbh-&gt;prepare_cached('INSERT INTO employees VALUES (?,?,?)'); 
          my $update_handle = 
            $dbh-&gt;prepare_cached('UPDATE departments 
                                     SET num_members = num_members + 1
                                   WHERE id = ?');
</pre>
<p>
<pre>          die &quot;Couldn't prepare queries; aborting&quot;
            unless defined $insert_handle &amp;&amp; defined $update_handle;
</pre>
<p>
<pre>          my $success = 1;
          $success &amp;&amp;= $insert_handle-&gt;execute($first, $last, $department);
          $success &amp;&amp;= $update_handle-&gt;execute($department);
</pre>
<p>
<pre>          my $result = ($success ? $dbh-&gt;commit : $dbh-&gt;rollback);
          unless ($result) { 
            die &quot;Couldn't finish transaction: &quot; . $dbh-&gt;errstr 
          }
          return $success;
        }
</pre>
<p>
We perform both queries, and record in <code>$success</code> whether they both succeeded.  <code>$success</code> will be true if both queries succeeded, false otherwise. If the queries
succeded, we commit the transaction; otherwise, we roll it back, cancelling
all our changes.</p>

<p>
The problem of concurrent
database access is also solved by transactions. Suppose that queries were executed immediately, and that
some other program came along and examined the database after our insert
but before our update. It would see inconsistent data in the database, even
if our update would eventually have succeeded. But with transactions, all
the changes happen simultaneously when we do the <code>commit</code>, and the changes are committed automatically, which means that any other
program looking at the database either sees all of them or none.</p>

<p>

<h2><a name="Miscellaneous">Miscellaneous</a></h2>
<p>

<h3><a name="C_do_"><code>do</code></a></h3>
<p>
If you're doing an <code>UPDATE</code>, <code>INSERT</code>, or <code>DELETE</code> there is no data that comes back from the database, so there is a short
cut. You can say

<p>
<pre>        $dbh-&gt;do('DELETE FROM people WHERE age &gt; 65');
</pre>
<p>
for example, and <code>DBI</code> will prepare the statement, execute it, and finish it.  <code>do</code> returns a true value if it succeeded, and a false value if it failed.
Actually, if it succeeds it returns the number of affected rows. In the
example it would return the number of rows that were actually deleted. (<code>DBI</code> plays a magic trick so that the value it turns is true even when it is 0.
This is bizarre, because 0 is usually false in Perl. But it's convenient
because you can use it either as a number or as a true-or-false success
code, and it works both ways.)</p>

<p>

<h3><a name="AutoCommit">AutoCommit</a></h3>
<p>
If your transactions are simple, you can save yourself the trouble of
having to issue a lot of <code>commit</code>s. When you make the <code>connect</code> call, you can specify an <code>AutoCommit</code> option which will perform an automatic <code>commit</code> operation after every successful query. Here's what it looks like:
</p>
<p>
<pre>        my $dbh = DBI-&gt;connect('DBI:Oracle:payroll', 
                               {AutoCommit =&gt; 1},
                              )
                or die &quot;Couldn't connect to database: &quot; . DBI-&gt;errstr;
</pre>
<p>

<h3><a name="Automatic_Error_Handling">Automatic Error Handling</a></h3>
<p>
When you make the <code>connect</code> call, you can specify a <code>RaiseErrors</code>
option that handles errors for you automatically. When an error occurs, <code>DBI</code> will abort your program instead of returning a failure code. If all you
want is to abort the program on an error, this can be convenient:</p>

<p>
<pre>        my $dbh = DBI-&gt;connect('DBI:Oracle:payroll', 
                               {RaiseError =&gt; 1},
                              )
                or die &quot;Couldn't connect to database: &quot; . DBI-&gt;errstr;
</pre>
<p>

<h3><a name="Don_t_do_This">Don't do This</a></h3>
<p>
People are always writing code like this:

<p>
<pre>        while ($lastname = &lt;&gt;) {
          my $sth = $dbh-&gt;prepare(&quot;SELECT * FROM people 
                                   WHERE lastname = '$lastname'&quot;);
          $sth-&gt;execute();
          # and so on ...
        }
</pre>
<p>
Here we interpolated the value of <code>$lastname</code> directly into the SQL in the <code>prepare</code> call.
</p>
<p>
This is a bad thing to do for three reasons.
</p>
<p>
First, <code>prepare</code> calls can take a long time. The database server has to compile the SQL and
figure out how it is going to run the query. If you have many similar
queries, that is a waste of time.</p>

<p>
Second, it will not work if <code>$lastname</code> contains a name like O'Malley or D'Amico or some other name with an <code>'</code>. The <code>'</code> has a special meaning in SQL, and the database will not understand when you
ask it to prepare a statement that looks like

<p>
<pre>        SELECT * FROM people WHERE lastname = 'O'Malley'
</pre>
<p>
It will see that you have three <code>'</code>s and complain that you
don't have a fourth matching <code>'</code>
somewhere else.</p>

<p>
Finally, if you're going to be constructing your query based on a user
input, as we did in the example program, it's unsafe to simply
interpolate the input directly into the query, because the user can
construct a strange input in an attempt to trick your program into
doing something it didn't expect.  For example, suppose the user
enters the following bizarre value for <code>$input</code>:</p>

<pre>        x' or lastname = lastname or lastname = 'y
</pre>

<p>Now our query has become something very surprising:</p>

<pre>
        SELECT * FROM people WHERE lastname = 'x' 
         or lastname = lastname or lastname = 'y'
</pre>

<p>The part of this query that our sneaky user is interested in is the
second <code>or</code> clause.  This clause selects all the records
for which <code>lastname</code> is equal to <code>lastname</code>;
that is, all of them.  We thought that the user was only going to be
able to see a few records at a time, and now they've found a way to
get them all at once.  This probably wasn't what we wanted.</p>

<table width="220" cellspacing="0" cellpadding="4" align="right" border="1">
<tr>
<td bgcolor="#0033cc" valign="top" align="center">
<font color="#ffffff">References</td>
<tr>
<td valign="top">
<p class="fine">

&#149; A complete list of DBD modules are available <a href="http://www.cpan.org/modules/00modlist.long.html#7)DatabaseInterfac">here</a><br />
&#149; You can download these modules <a href="http://www.cpan.org/modules/by-module/DBD/">here</a><br />
&#149; <code>DBI</code> modules are available <a href="http://www.cpan.org/modules/by-module/DBI/">here</a><br />
&#149; You can get MySQL from <a href="http://www.tcx.se/">www.tcx.se</a><br />
</td>
</tr>
</table>
<p>
People go to all sorts of trouble to get around these problems with
interpolation. They write a function that puts the last name in quotes
and then backslashes any apostrophes that appear in it. Then it breaks
because they forgot to backslash backslashes. Then they make their
escape function better. Then their code is a big message because they
are calling the backslashing function every other line. They put a lot
of work into it the backslashing function, and it was all for nothing,
because the whole problem is solved by just putting a <code>?</code>
into the query, like this

<p>
<pre>        SELECT * FROM people WHERE lastname = ?
</pre>
<p>
All my examples look like this. It is safer and more convenient <em>and</em>
more efficient to do it this way.</p>





</html>
<p></TD>
</TR>
</TABLE>

<TABLE WIDTH="100%" CELLSPACING="0" CELLPADDING="0" BORDER="0">
<TR>
<TD WIDTH="100%" ALIGN="center">


</TR>

<TR>
</TR>

<TR>
<td align="CENTER" valign="MIDDLE"><font face="Verdana,Arial,Helvetica" size="-2" color="#990000"><b>
</TR>

</TABLE>
<p align="center" class="fine">
Compilation Copyright &copy; 1998-99 <A HREF="http://www.oreilly.com">O'Reilly & Associates, Inc.</A></P>

</BODY>
</HTML>
