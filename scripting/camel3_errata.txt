
Programming Perl, 3rd Edition
by Larry Wall, Tom Christiansen & Jon Orwant

This errata page lists errors outstanding in the most recent printing.  

If you have any error reports or technical questions, you can send them to
booktech@oreilly.com.  (Please specify the printing date of your copy.)

This page was updated on March 14, 2001.

Here's a key to the markup:

        [page-number]: serious technical mistake
        {page-number}: minor technical mistake
        <page-number>: important language/formatting problem
        (page-number): language change or minor formatting problem
        ?page-number?: reader question or request for clarification



Confirmed errors:


(13) 3rd-to-last paragraph, "adding a level to a nested data structure it is
like adding":
Remove the word "it".


{22} last parapgraph:
After "or infix operators (which go in between their operands)," add "or 
postfix operators (which go after their operands)."


{37} code:
The code at the top of the page will print a line multiple times if it has 
multiple URLs in it. That does not appear to be the intent.


(38) The penultimate sentence of the penultimate paragraph says "This is 
something to watch out for especially when ...". This should say "Be 
especially careful when you are using ..."


(54) 1st paragraph:
Remove right parenthesis after "scope."


(55) The first sentence in the fourth paragraph reads "As of version 5.6, Perl
also has an extensible syntax for internal variables names".  The word should 
be "variable".


{67} fourth paragraph (the sauces example):
The match regular expression in this example, "m/(\S.*\S)/g", will fail to 
match sauces whose name consist of a single character (i.e. sauce "a"). 


(71) In the third paragraph, the third sentence says "Note that what we 
earlier said still holds."  Change this to "said earlier" to make the phrasing
a bit less stilted.


(73) In the second paragraph, the second sentence says "Like the @files array 
we mentioned earlier the comma operator knows...".  A comma should be inserted
after the word "earlier".


(78) "Tyepglobs and Filehandles" section, 1st sentence: 
	
	"Perl uses an special type ..."

Change "an" to "a".


(126) 2nd paragraph of "goto" section:
"cant" should be "can't."


(150) In the third paragraph, the second sentence says "The numbered variables
are still set even when ...".  A comma should be added after "set".


(206) top, first word on page:
"contination" should read "continuation".


(209) 2nd paragraph:
"the same time as rest" => "the same time as the rest".


(219) 2nd-to-last paragraph:
In "Since @_ is a just a regular array..." remove the first "a".


(325) 3rd paragraph, last line:

	...instead of leftmost one.

Change to:

	...instead of the leftmost one.


(331) 4th paragraph, last line:

	...in the recipe 13.13, "Coping with Circular Data Structures".

Change to:

	...in recipe 13.13, "Coping with Circular Data Structures".


(336) "Generating Classes with Class::Struct" section, 2nd sentence:

	This creates all the trapping you'll need...

should be "trappings."


{338-339} 2nd code example (bottom of 338 to top of 339):
The $field and $slot variables are improperly transposed in the code which 
assigns the closure reference to a symbol table slot.

	*$field = sub {
    	    my $self = shift;
    	    $self->{$slot} = shift if @_;
    	    return $self->{$slot};	
	};

should be

	*$slot = sub {
    	    my $self = shift;
    	    $self->{$field} = shift if @_;
    	    return $self->{$field};
	};


(361) "Inheritance and Overloading" section, 2nd paragraph, 1st sentence:
"a overloaded class" should be "an overloaded class."


(415) 2nd paragraph, 6th line:
"automaticaly" should be "automatically".


(437) 1st para:
"exceptions: it that all" => "exceptions: that all"


(477) section "Code Generators", 3rd sentence:
"... and more CPU time than than they would ordinarily.": Remove one of the 
thans.


(478) 2nd-to-last paragraph, 4th line:
"...whereas in the C code generated by B::CC..." should be "...whereas the C 
code generated by B::CC..."


(486) 3rd-to-last line:
missing closing parenthesis in "Interprocess Communication".


(508) middle of page, paragraph beginning "As you see":
second line

	If you'` had set an action, there also would also

should be

	If you had set an action, there would also


(509) 4th-to-last paragraph:
"to set breakpoint on loading" should be "to set a breakpoint on loading."


(523) 2nd paragraph:
"the the @DB::args array" should be "the @DB::args array."


(526) 4th paragraph, last line:
"(see described later)" should be "(as described later").


(610) last bullet point:
	
	"Don't put semicolon at the end of a one-line block"
 
should be

	"Don't put a semicolon at the end of a one-line block"


(671) 2nd paragraph:
"have a a numeric value" should be "have a numeric value"


{764} under the entry for pipe, in the one-sentence paragraph beginning "(As 
with open":

  	autovivfied

should be

  	autovivified		


{783} semget:
Delete "SIZE" in function reference.


[792] last block of code:
change to:

@sorted_lines = map { $_->[0] }
                sort { 
                   $a->[4] <=> $b->[4] # beware: indices really 
                                       # appear to start at 1
                           ||
                   $a->[1] cmp $b->[1]
                           ||
                   $a->[3] <=> $b->[3]
                           ||
                   ...
                }
                map { [$_, split /:/] } @lines;

With this, there would be no need to allocate an @a_fields and an @b_fields 
arrays, and to fill them with what already is in @$a and @$b.


{812} description of syswrite:
The set of allowable calling sequences indicates that LENGTH is an optional 
argument.  The description that follows doesn't specify what happens if no 
LENGTH is given.  Presumably, all the bytes in the scalar are written, but one
doesn't like to presume.


(822) 1st paragraph:

	"Most use declarations looks like this:"

should be

	"Most use declarations look like this:"













Programming Perl, 3rd Edition
by Larry Wall, Tom Christiansen and Jon Orwant

The following changes were made in the 3/01 reprint:


(165) last paragraph:
"specify a character classes" now reads "class."


(229) 2nd paragraph:

	Both version of these functions...

now reads "versions."


(506) 3rd paragraph:
"intrepreter" now reads "interpreter."


(513) first description sentence for "l" command:
"The l command lists next the few lines..." now reads "The l command lists the
next few lines..."


(518) 1st paragraph, last sentence:
"You may change the behavior of debugger" now reads "You may change debugger
behavior."


(518) 2nd paragraph:
"with using the exclamation point syntax" now reads "with the exclamation 
point syntax."


(522) "noTTY" section, 2nd paragraph:
"to use its input and output correspondingly" now reads "to use as input and 
output."


(529) 1st line:
"DProf is not your only choice for profiler" now reads "DProf is not your only
choice of profiler."


(653) 2nd-to-last paragraph:

	you can look up variables that you're not sure of the proper name
 
now reads 

	you can look up variables when you're not sure of the proper name


(662) 4th-to-last line:

	without the loading colon

now reads

	without the leading colon


(666) 4th paragraph:
"to access ARGV handle" now reads "to access the ARGV handle".


(666) 2nd-to-last paragraph:
"variable-length record" now reads "variable-length records".


{709} 1st line:
'"view" @files' now reads '"view", @files'. Also, "$editor" now reads 
"/usr/bin/vi".


(715) code at bottom of page:
The "elsif" and "else" lines are now outdented so they line up under the 
braces.


(727) last paragraph:
"you'll need to use" now reads "you'll want to use".


(834) 4th paragraph, 1st sentence:
"larger modules will be automatically loaded" now reads "larger modules that 
will be automatically loaded".


(906) safe code example:
There are two comments reading
  
	# like do(), but in the sandbox

The second one now reads
  
	# like eval(), but in the sandbox


(945) "Illegal hexadecimal digit":
"f" is now in CW font.


(965) bottom of the page:
">%s>" now reads "<%s>".

Programming Perl, 3rd Edition
by Larry Wall, Tom Christiansen and Jon Orwant

The following changes were made in the 12/00 reprint:


(15) 3rd complete paragraph:
"download it and know how to say" now reads "download whatever module you like
and say." After the code block, "and then use" now reads "Then you can use".


(99-100) All of the "if" clauses were indented to align with the "if" in

	print "Executable\n" if -x _;


(104) first paragraph: 
"that operand implicitly compared" now reads "that operand *is* implicitly 
compared."


{104} 1st code block:

	# skip header lines

now reads

	# skip header lines of a message

and 

	# quote body

now reads

	# quote body of a message


(118) In the third paragraph, "foreach" was hyphenated as "fore-ach". To fix 
this, "foreach" and the following "for" were swapped.


(123) last paragraph: 
"do{}" now reads "do {}."


(149) In the second code example ("Find duplicate words ..."), the closing 
parenthesis on the inner "while" was moved one space to the right.


(328) second paragraph before last:

	"you won't be able to use UNIVERAL::can on a method name ..."

now reads "UNIVERSAL::can."


(329) 3rd paragraph:  

	"They show up in a UNIVERAL::can check, and ..." 

now reads

	"They show up in a UNIVERSAL::can ..."


(491) middle of the page:

	The MacPerl shell, or MPW

now reads
   
	MPW, which can be used as a shell for MacPerl


(516) last line before "Miscellaneous Commands" section:
"sawwho" now reads "saywho."


{537} 3rd paragraph:

	returns 0 if the number is even, or 1 if the number is odd

now reads
  
	returns 1 if the number is even, or 0 if the number is odd


{560} 10th line:

	$oldpath = $ENV{PATH}; # $oldpath is tainted (due to $ENV)

now reads
  
	$oldpath = $ENV{PATH}; # $oldpath is tainted (due to %ENV)


{560} two-thirds down the page:

	open(OOF,"-|", "echo", $arg   # Same as previous, likewise OKish

now reads
  
	open(OOF,"-|", "echo", $arg)  # Same as previous, likewise OKish


{587} first bullet:

	your $1, $2... variables, as well as $`, $& and $'.

now reads
  
	your $1, $2... variables, as well as $`, $&, $', and friends.


(587) 5th bullet:
All [1] indexes were changed to [0].

Before 5th bullet another bullet was added saying, "Using $foo[1] when you 
mean $foo[0]. Perl arrays begin at zero by default.


[588] first bulleted paragraph:
comment on last line of example now reads:

	# Scalar contexxt; $x is set to 3 (the array length)


{599} last bullet point was replaced with

	To cache function results, use the Memoize module on CPAN.


{667} @+ paragraph:
The @+ variable is now labeled [DYN,RO] (similar to @-).


{684} 3rd paragraph:
"Timer::HiRes" now reads "Time::HiRes."

Programming Perl, 3rd Edition
by Larry Wall, Tom Christiansen and Jon Orwant

The following is a list of changes in the 10/00 reprint.


{xxiii} "OS390" in 2nd paragraph was removed.


{xxx} 4th and 5th paragraphs:
"Prentiss-Hall"  now reads "Prentice-Hall."


(50) 2nd paragraph:
"multiline quoting" now reads "multiline commenting".


{87} Table 3-1:

The line:

	Right | 1 | ! ~ > and unary + and -

now reads:

	Right | 1 | ! ~ \ and unary + and -


{91} example:

	print ++($foo = 'a0');	# prints 'b1'

now reads:

	print ++($foo = 'a9');	# prints 'b0'


{181} 1st paragraph, line 16, last sentence before sub-heading "Where You Left
Off: The \G Assertion":
The sentence: 

	"Without the /c, the second loop's match would have 
	restarted from the beginning and found another i at 
	position 6 first."

now states:

"... at position 1 first." 


(208) last paragraph:
last sentence: "Here's why you might get if you run...":
"why" now reads "what."

Also, /usr/dict/wordses now reads /usr/dict/words.


(234) 2nd paragraph:

	(Usually it's best to rukeep them all together.) 

now reads "keep."


(253) 3rd paragraph:

	This form of syntactic sugar that makes it easier...

The word "that" was removed.


(262) 2nd paragraph, code example:
"7gt;" now reads ">".


(304) 1st paragraph, 3rd line:

	Inside the Export module..

now reads "Exporter."


(348) synopsis section:
";" and "," are swapped on 2nd and 3rd lines of "use overload" statement.

now reads:

use overload '+'   => \&myadd,            # coderef
             '<'   => "less_than",        # named method
             'abs' => sub { return @_ };  # anonymous subroutine


{549} In the second paragraph, both instances of "by-name" now read 
"by-module".


{566} last line:
  
	$( = $) ($EGID = $GID)
    
now reads
  
	$) = $( ($EGID = $GID)


(615) 6th bullet:
"%seen array" now reads "%seen hash"


(662)  description of @EXPORT:
The entry for @EXPORT now has a first-line outdent like $EXECUTABLE_NAME above
it (and all other entries).


{667} In the last line of the paragraph beginning "This array holds", "@_" now
reads "@-".


{715} last sentence before "fork" section:
"See also...other flock examples" was replaced with:

	See also the section on "File Locking" in Chapter 16 
	for other flock examples.


(849)  3rd paragraph, second sentence under heading _use filetest 'access'_:
"filetext" now reads "filetest". 


INDEX:

An updated index was added. 



Programming Perl, 3rd Edition
by Larry Wall, Tom Christiansen and Jon Orwant

The following is a list of changes in the 10/00 reprint.


{xxiii} "OS390" in 2nd paragraph was removed.


{xxx} 4th and 5th paragraphs:
"Prentiss-Hall"  now reads "Prentice-Hall."


(50) 2nd paragraph:
"multiline quoting" now reads "multiline commenting".


{87} Table 3-1:

The line:

	Right | 1 | ! ~ > and unary + and -

now reads:

	Right | 1 | ! ~ \ and unary + and -


{91} example:

	print ++($foo = 'a0');	# prints 'b1'

now reads:

	print ++($foo = 'a9');	# prints 'b0'


{181} 1st paragraph, line 16, last sentence before sub-heading "Where You Left
Off: The \G Assertion":
The sentence: 

	"Without the /c, the second loop's match would have 
	restarted from the beginning and found another i at 
	position 6 first."

now states:

"... at position 1 first." 


(208) last paragraph:
last sentence: "Here's why you might get if you run...":
"why" now reads "what."

Also, /usr/dict/wordses now reads /usr/dict/words.


(234) 2nd paragraph:

	(Usually it's best to rukeep them all together.) 

now reads "keep."


(253) 3rd paragraph:

	This form of syntactic sugar that makes it easier...

The word "that" was removed.


(262) 2nd paragraph, code example:
"7gt;" now reads ">".


(304) 1st paragraph, 3rd line:

	Inside the Export module..

now reads "Exporter."


(348) synopsis section:
";" and "," are swapped on 2nd and 3rd lines of "use overload" statement.

now reads:

use overload '+'   => \&myadd,            # coderef
             '<'   => "less_than",        # named method
             'abs' => sub { return @_ };  # anonymous subroutine


{549} In the second paragraph, both instances of "by-name" now read 
"by-module".


{566} last line:
  
	$( = $) ($EGID = $GID)
    
now reads
  
	$) = $( ($EGID = $GID)


(615) 6th bullet:
"%seen array" now reads "%seen hash"


(662)  description of @EXPORT:
The entry for @EXPORT now has a first-line outdent like $EXECUTABLE_NAME above
it (and all other entries).


{667} In the last line of the paragraph beginning "This array holds", "@_" now
reads "@-".


{715} last sentence before "fork" section:
"See also...other flock examples" was replaced with:

	See also the section on "File Locking" in Chapter 16 
	for other flock examples.


(849)  3rd paragraph, second sentence under heading _use filetest 'access'_:
"filetext" now reads "filetest". 


INDEX:

An updated index was added. 




Programming Perl, 3rd Edition
by Larry Wall, Tom Christiansen and Jon Orwant

The following is a list of changes in the 8/00 reprint.


[28] table: 
now includes the following row:

        Greater than or equal   >=      ge      True if $a not less than $b


Chapters 31 and 32 had the wrong bleeding tabs. Chapter 31 now reads 
"Pragmata" and Chapter 32 now reads "Modules".    




UNCONFIRMED FROM READERS:

Programming Perl, 3rd Edition
by Larry Wall, Tom Christiansen and Jon Orwant

Unconfirmed error reports are from readers.  They have not yet been 
approved or disproved by the author or editor and represent solely the
opinion of the reader.

This page was updated March 23, 2001.

Here's a key to the markup:

        [page-number]: serious technical mistake
        {page-number}: minor technical mistake
        <page-number>: important language/formatting problem
        (page-number): language change or minor formatting problem
        ?page-number?: reader question or request for clarification


UNCONFIRMED errors and comments from readers:


{49} third paragraph, last sentence:
"Statements in Perl are terminated with semicolons..." seems to be slightly 
inaccurate, as it seems (from experimentation) that the statements in Perl are
separated with semicolons.  If this is true, perhaps a footnote is in order.  
(The statement about C is true.)


{50} first paragraph, first line:

	"...if a line begins with = anywhere a statement would 
	be legal..."

It seems that an alphabetic character must immediately follow the =. 
Otherwise, Perl responds with a syntax error.


[100] first paragraph:
"File ages ... since the script started running ..." is incorrect. It should 
read "File ages ... prior to when the script started running."

Also, the subsequent "This time ..." should be "The time when the script 
started running ...", or the text should be reorganized.  In this context, 
"This" is, at the very least, ambiguous.


{106} 3rd code example:
missing ; after printf


{117} 1st full paragraph:
The variable "bit" should be initialized to 1 as it is in the next paragraph.


[131] 1st paragraph:
"When you assign to a modified lvalue, the modifier doesn't change whether the
lvalue is viewed as a scalar or a list. To figure how the assignment will 
work, just pretend the modifier isn't there. So either of:

>>   my ($foo) = <STDIN>;
     my @array = <STDIN>;

supplies a list context to the righthand side"...

The line I've flagged with '>>' should read my (@foo) = <STDIN>;.
                                                ^

(172) 1st paragraph:
Shouldn't "you wonder whether it were written in Greek script" read "you 
wonder whether it was written in Greek script"?


{181} To get the example to work, I had to add "g" to 3 lines as listed below:
last half of example at bottom of page:

	$recipe =~ /\d+ /g;	
	$recipe =~ /\G(\w+)/g;	# Add g after last / here
	$recipe =~ /\d+ /g;	
	$recipe =~ /\G(\w+)/g;	# and here
	$recipe =~ /\d+ /g;	
	$recipe =~ /\G(\w+)/g;	# and here.


{181-182} \G Assertion program:  
In the second section of code, the comments line states that $1 equals "deg", 
then "ml", then "oz". But when you run the program, you get "Preheat" every 
time. Also, the output for the prgram gives the correct numbers (in the order 
they come in the paragraph), but it only says "deg of fahrentheit" over and 
over rather than "deg of fahrenheit, ml of dilitium" etc. The corrected code 
is as follows:

#!/usr/bin/perl

#The \G Assertion:  Corrected Code

($recipe = << 'DISH') =~ s/^\s+//gm;
	Preheat over to 451 deg. fahrenheit.
	Mix 1 ml. dilithium with 3 oz. of NaCL and
	stir in 4 anchovies. Glaze with 1 g.
	mercury.  Heat for 4 hours and let cool
	for 3 seconds.  Serves 10 aliens.
DISH

$recipe =~ /\d+ /g;
$recipe =~ /\G(\w+)/g;	#$1 is now "deg"
$recipe =~ /\d+ /g;
$recipe =~ /\G(\w+)/g;	#$1 is now "ml"
$recipe =~ /\d+ /g;
$recipe =~ /\G(\w+)/g;	#$1 is now "oz"

pos($recipe) = 0;
while ($recipe =~ /(\d+) /g) {
	my $amount = $1;
	# On below line: Took off + from \s+ and added cg
	if ($recipe =~ / \G (\w{0,3})  \. \s (\w+) /cgx) { 
		print "$amount $1 of $2\n";
	} else {
		$recipe =~ / \G (\w+) /cgx;  #Added cg
		print "$amount $1\n";
	}
}


(209) "milquetoasts" has an extra s.


{226} The description of prototypes in chapter 6 is missing an important hint.
Insert the following sentence before the last sentence on the page:

	"The value passed as part of `@_' will be a reference to the
	actual argument given in the subroutine call, obtained by
	applying `\' to that argument."

(I took this description from the perlsub(1) manpage for perl v5.6.0.)

Later chapters, for example chapter 8, page 244, third paragraph refer to this
behaviour so it is important to have this line added.


{232} 4th paragraph (just after the "The lvalue attribute" heading):
The example to show how to return a modifiable scalar value from a subroutine 
uses a variable called $val. However, when calling the "canmod" subroutine, a
variable called $x is used, which causes the program, if copied onto an editor
and executed, to generate a different result. The variable $x should be 
changed to $val.


(244) 1st paragraph:
The sentence:

  	A hard reference doesn't know something's name just 
	to refer to it,...

doesn't make sense (to me) as stated. Should it be something like:

  	A hard reference doesn't need to know something's name 
	just to refer to it,

or:

  	A hard reference doesn't know something's name, just to 
	refer to it,

(Note additional comma.)

I'm not sure which meaning was intended.


[254] last paragraph:
I was confused as to how to obtain the "C behavior" that is discussed 
following the two examples given for accessing elements in a 2-dimensional 
array.

I set up a 2D array like this:

	@myarray = ( [1,2,3,4], [5,6,7,8], [9,10,11,12] );

and a reference like this:

	$listref = \@myarray;

These worked:

	$listref->[2][2] = "hello";
	$$listref[2][2] = "hello";

The paragraph suggests ${$listref[2]} to obtain C behavior, but I couldn't see
how to make that apply to this particular data structure, since it only 
appears to refer to one dimension.  The alternative $listref[2]->[$greeting] =
"hello"; makes more sense on paper, assuming $greeting exists or no 
declaration is required, but it did not alter my array in practice.  The array
was unaltered, and I seemed to be autovivifying something.  Did the paragraph 
mean to imply that these were equivalent to the first two access methods, on 
the same data structure--or was I reading too much into the "equivalence" that
was being discussed?


(258) 3rd code example:
July 16, 2000 was a Sunday. (I only bothered to check in order to practice the
Doomsday algorithm.)


[318] Chapter 12, last paragraph:

  	"the package name (passed in as the first argument) to bless:"

should be

  	"the package name (passed in as the second argument) to bless:"


(333) near end of third paragraph:
The next-to-last sentence of the third paragraph on page 333 says: 
"...including the standard Struct::Class module..."

There is no Struct::Class module.  This should be changed to "Class::Struct" 
module.


[338] 1st paragraph, 1st code example:
code example reads:
   
	sub AUTOLOAD {
       	    my $self = shift;
       	    # only handle instance methods, not class methods
       	    croak "$self not an object" unless ref($invocant);
       	    my $name = our $AUTOLOAD;
       	    ...
       	    ...

It should read:

	sub AUTOLOAD {
       	    my $self = shift;
       	    # only handle instance methods, not class methods
       	    croak "$self not an object" unless ref($self);
       	    my $name = our $AUTOLOAD;
       	    ...
       	    ...

$invocant isnt defined in this routine or in the package for which the routine
is being defined.


(379) example code at the top of the page:
The STORE method is missing a $ on the hash key. Change:

    	push @{$self->{key}}, $value;

to:

   	push @{$self->{$key}}, $value;


[396] Chapter 14, Example "sub comment {":

  	print { $self->{FH} } $handle $message, "\n";

should be

  	print { $self->{FH} } $message, "\n";


[416]  code example, middle of page:
The while loop should be:

    	while (($zombie = waitpid(-1, WNOHANG)) > 0 ) {
            $Kid_Status{$zombie} = $?;
    	}

i.e., "> 0" and not "!= -1" since waitpid returns 0 if no processes have died 
yet, and 0 is not a valid process ID.


(422) description of "File Locking":
The text states:

  	# must get lock before opening database
  	flock(DBLOCK, LOCK_SH)
    	 or die "can't LOCK_SH $LCK: $!";

This is an apparent clash with the rest of the example and the surrounding 
text.  The example proceeds to "tie(....O_RDWR | OCREAT)" and the test says 
"you can do whatever you'd like"; so that all indicates the prior "LOCK_SH" 
should have been a "LOCK_EX".

Also, by the way, in my opinion "DB_LOCK" would be a better name for the file 
handle, instead of "DBLOCK", which reads as "D BLOCK".


(442) source code at end of the page:

	open (STDIN, "<<&Client") or die "can't dup client: $!";

This code always produces the "or die" part when a client connects. The right 
code is as follows:

	open (STDIN, "<&Client") or die "can't dup client: $!";


[453] Chapter 17, down the page:

  	$t1->tid() == $td->tid()

should be

  	$t1->tid() == $t2->tid()


[460] Chapter 17, in the first function of the example:

  	cond_signal($wait_var);
  	$wait_var = 1;
  	cond_wait $wait_var until $wait_var == 2;

I think it should be

  	$wait_var = 1;
  	cond_signal($wait_var);
  	cond_wait $wait_var until $wait_var == 2;

because the cond_signal() releases the lock on $wait_var.

I would also suggest to add the following clarification to the second 
paragraph:

  	The cond_signal function takes a variable already locked 
	by the current thread, releases the lock, and unblocks one 
	thread that's currently...


[521] last paragraph:

  	putting trace information into the file db.out.

should be

  	putting trace information into the file tperl.out.

(See the parameter example above the paragraph.)


{543} second paragraph:
Before reading the "perlcall" manpage, Programming Perl (3rd Ed) readers are 
referred to the "perlguts" and "perlapi" manpages. However, as far as I can 
tell, there is no such beast as the "perlapi" manpage.

When I read the "perlcall" manpage, it suggests that you read "perlguts" and 
"perlxs". Both of these exist on my systems.


[567] first display:
The sample program given to "safely" run subprocesses makes a mistake that, 
depending on circumstances, may ruin the purpose.

You should set GID before UID.

It is quite likely that setting gid will otherwise fail because the child 
lacks authority to change groups at that point.  (This is, of course, quite 
dependant on the OS being used.)


{597} under the 2nd pin:

    	if ($a) {
            $foo =3D $a;
    	}
    	elsif ($b) {
            $foo =3D $b;
    	}
    	elsif ($c) {
            $foo =3D $c;
    	}

should be:
    
	if ($a) {
            $foo =3D $a;
    	}
    	elsif ($b) {
            $foo =3D $b;
    	}
    	else ($c) {
            $foo =3D $c;
    	}

It makes a difference if $c is "0" or "".


[623] example in the middle:

  	local($/) = LF;    # not needed if $/ is already \012

I think there is a $ missing, and it should read

  	local($/) = $LF;   # not needed if $/ is already \012


(625) 4th bullet paragraph, code text, third example:

	open (FILE, "<" , $existing_file) or die $!; #righterer

should read:

	open (FILE, "<" . $existing_file) or die $!; #righterer

Concatination is required.


(693) 3rd paragraph:
In the sentence "So if a close on a pipe returns a nonzero status,...", the 
phrase "nonzero status" should probably be replaced with "false value". The 
close() function returns a nonzero value on success; it is $! (not the return 
value of close()) that contains a nonzero value if there was an error with the
pipe itself.


(767) "prototype" section, 2nd paragraph, 1st sentence:
	
	"the rest is taken as a name for Perl built-in"
  
should be

	"the rest is taken as a name for a Perl built-in"


(777) "rindex" section, 2nd sentence:
"if not SUBSTR is found" should be "if SUBSTR is not found."


(790) bottom of page:
In some cases the hash variable is called %sales_amount and in others it is 
called %sale_amount.


(792) last paragraph:
"Schwartzian Transform" should be in the index.


[800] srand function, third paragraph, first sentence:
The sentence "You'll need something much more random than the default seed for
cryptographic purposes" gives the dangerously misleading impression that the 
rand function is suitable for cryptographic purposes if initialized with a 
suitable seed.  This is untrue.  The third paragraph should be something along
the lines of:

  	Although the default value used for the random number 
	seed (if srand is not called with later versions of perl) 
	may be taken from a source of cryptographically-strong 
	random numbers, that does not mean that the rand function 
	is suitable for cryptographic purposes - far from it.  If 
	you need a source of cryptographically-strong random numbers, 
	you should be accessing /dev/urandom directly, or checksumming 
	the compressed output [... as before]

There is also an omission in the description of srand, namely why one might 
wish to use it on later versions of perl in the first place. Something along 
the lines of:

  	One use for srand, even on later versions of perl, is to 
	ensure that you get the same sequence of seemingly-random 
	numbers each time you run your program.  This can be helpful 
	when you need to debug a program which uses random numbers.  
	Instead of having to replace the calls to rand with a subroutine 
	that supplies numbers from a fixed list, you simply place say, 
	srand(1);, at the start of your program.


(806) "syscall" section, 1st sentence:
"list passes the remaining elements" should be "list, passing the remaining 
elements."


(820) 4th paragraph:
The 4th paragraph contains a tautology:

	"The unpack function is also useful for plain text data, too, not ..."

suggest it be changed to:

	"The unpack function is also useful for plain text data, not ..."


(827) "wantarray" section, 2nd paragraph:
"Here's are examples of typical usage" should be "Here are examples of typical
usage."


{843} 3rd program text display:
The line is:

    	use constant FOO => 4

I would expect a semicolon at the end of this, but there is none.


[867] table:
The Getopt::Long and the explanation are in different table rows.


(876) 2nd-to-last paragraph, 2nd sentence:
"run a couple different algorithms" should be "run a couple of different 
algorithms."


(878) "Carp" section, 1st paragraph, last sentence:
"Carp is great way to misdirect blame" should be "Carp is a great way to 
misdirect blame."


(882) "Data::Dumper" section, last paragraph:
"reproduces an faithful copy of the original" should be "reproduces a faithful
copy of the original."


(886) 3rd-to--last paragraph:
"the use statement requests that a particular version" should be "the use 
statement requests a particular version"


[900] bottom of page, under the IPC::Open2 heading:

	$his_output = <HIS_IN>; 

$his_output should be getting <HIS_OUT>.

	close(README);

local handle should be: close(HIS_OUT);


{908} example code, 6th and 7th lines:
The code reads

	use Symbol "gensym";
	$sym1 = getsym();
	$sym2 = getsym();

I belive the correct syntax is

	use Symbol "gensym";
	$sym1 = gensym();
	$sym2 = gensym();


INDEX:

(1025) second column, 5 lines from the bottom:
Change
  
	dweomer, 986
  	dwimmer, 987

to
  
	dweomer, 577, 986
  	dwimmer, 577, 987










