<HTML><HEAD><TITLE>Learning Perl, Part III</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<a target="_top" href="http://newads.cmpnet.com/event.ng/Type=click&ProfileID=97&RunID=21217&AdID=17791&GroupID=1&FamilyID=1&TagValues=163.178&Redirect=http:%2F%2Fwww.businessengine.net%2Fbenet%2Fdefault.asp"><img src="http://img.cmpnet.com/ads/graphics/cs/av/BES-b2-.gif" border=1 height=60 width=468 alt="Click Here!"></a>
<p>
<table cellpadding="0" cellspacing="0" border="0" width=100%>
<tr valign=bottom><td><a href="http://www.cmpnet.com/"><IMG SRC="http://img.techweb.com/shared/general/logos/cmpnet111x42.gif" ALT="CMPnet" width="111" height="42" border=0></a></td>
<td nowrap width=20>&nbsp;&nbsp;</td>
<td align=center><font size="4" face="helvetica,arial"><b><a href="http://www.cmpnet.com/">www.cmpnet.com</a></b></font><br>
<font size="2" face="geneva,arial,helvetica">The Technology Network</font></td></tr></table>
<p>
<font size="5">Learning Perl, Part III</font><br>
<font size="2" face="geneva,arial,helvetica">By Martin Heller,  Byte.com<br>
Apr 5, 2000 (6:36 AM)<br>
URL: <A HREF="http://www.byte.com/column/BYT20000404S0002">http://www.byte.com/column/BYT20000404S0002</A></font>
</font>
<P>
Last month, we discussed doing object-oriented programming in Perl. This month, we'll look at applying Perl to websites. First, though, we'll need to go over some background.CGICommon Gateway Interface (CGI) programs are a standard, portable way to write Web-based applications. CGI programs can be written in almost any programming or scripting language that you care to run on your server, but Perl is far and away the most common language used for writing CGI scripts.<P>CGI is useful in several scenarios. The most common scenario is form processing: the website displays an HTML form to the user, and the user fills out the form. When the user submits the form, its contents are sent to a CGI script on the site for processing. Typically, the output of the form processing is a customized Web page, one or more e-mail, and/or a database entry.<P>Another common scenario is dynamic page generation. Here, the page might not even exist as an HTML file on the server: the HTML would be generated by the CGI script based on the current time, the browser being used, the phase of the moon. ...<P>Combining a database with dynamic page generation turns out to be extremely powerful. This is how most of the Internet search engines work, for instance, and how most shopping sites work.<P>CGI isn't the only available technology for any of these scenarios, and it has both pluses and minuses. On the plus side, your CGI scripts should be portable to any Web server running on any platform, since almost all Web servers support CGI- especially if the CGI script is written in Perl. <P>On the minus side, CGI has inherent scaling problems, because (in general) each time a CGI script is run it starts a new process. On some Web servers, there are Perl versions that either embed Perl in the Web server (mod_Perl for Apache) or run Perl as a DLL (ActiveState Perl for IIS); either method avoids the process invocation overhead.<P>Alternatives to CGI include Active Server Pages (ASP) and Internet Server API (ISAPI), which are Microsoft-specific technologies; Java Server Pages (JSP), a Sun technology; and Netscape Server API (NSAPI), which is a Netscape-specific technology. That's hardly an exhaustive list -- if you go looking, you'll find over a dozen more.<P>Several of the websites I've developed are hosted on Windows NT using Internet Information Server (IIS), for example http://wintune.winmag.com, http://tips.winmag.com, and http://www.pcpitstop.com. On those sites, I use ASP code (in VBScript or JavaScript) to process forms, generate pages and parts of pages dynamically, and generate parts of pages from databases. On my Unix-hosted sites, such as http://www.mheller.com/NECS, I use CGI and Perl scripts to accomplish the same ends.In any language, a CGI program or script needs to read an HTTP GET and/or POST request, and emit either a Content-type header followed by a blank line and then the actual content, a Location header to return a reference to content elsewhere on the Web, or a Status header (e.g. 404 Not Found) to signal an error condition.To return a Web page, the CGI script first returns the header line "Content-type: text/html", then a blank line, and finally the actual web page, starting with  and ending with .<P>A CGI script can tell whether it is processing a GET method or a POST method by looking at the REQUEST_METHOD environment string. If the method is GET, the program should read its input from the QUERY_STRING environment variable; if the method is POST, it should read its input from the standard input stream, using the CONTENT_LENGTH environment variable to determine the length of the content to read. <P>GET method calls are URL-encoded by definition; POST method calls may conform to one of a number of encodings, as determined by the CONTENT_TYPE environment variable. The most usual POST method encoding is application/x-www-form-urlencoded, however.<P>URL-encoded strings have blanks converted to plus signs, and other special characters converted to hex numbers preceded by a percent sign. Each form variable is presented as a name-value pair joined by an equal sign, and additional variables are delimited by ampersands. <P>In a GET method, the query string follows the URL and a question mark. So, for example, the CGI program cgitest.exe in the following example needs to parse the line that follows to set the variable name to "John Doe" and the variable email to "jdoe@SomeDomainNameHere.com":<P><pre><P>cgitest.exe?name=John+Doe&email=jdoe@SomeDomainNameHere.com<P></pre><P>So, how does one process CGI using Perl? The short answer, from www.perl.com, is:"CGI.pm is the module most developers use to build Web applications with Perl. It's written by Lincoln Stein and you can retrieve the module from CPAN or directly from Lincoln's site. The current documentation is also available at the CGI.pm page."<P>The longer answer is that you can write CGI programs in plain Perl without too much trouble, or you can reduce the amount of code you need to write using either Steven Brenner's cgi-lib.pl or the aforementioned CGI.pm. The downside of using either library is the learning curve; the upside is that you can get a lot done while writing very little code. Brenner's cgi-lib.pl is getting a little long in the tooth, so I won't discuss it further.<P>In plain old Perl, a CGI script can get its input with:<P><pre>local ($buf);if ($ENV{'REQUEST_METHOD'} eq 'POST') {	read(STDIN,$buf,$ENV{'CONTENT_LENGTH'});}else {	$buf=$ENV{'QUERY_STRING'};}</pre><P>Then, it can parse a URL-encoded buffer $buf with something like:<P><pre>@fval=split(/&/,$buf);foreach $i (0 .. $#fval){	($name,$val)=split (/=/,$fval[$i],2);	$val=~tr/+/ /;	$val=~ s/%(..)/pack("c",hex($1))/ge;	$name=~tr/+/ /;	$name=~ s/%(..)/pack("c",hex($1))/ge;	if (!defined($field{$name})) {		$field{$name}=$val;	}	else {		$field{$name} .= ",$val";	}}</pre><P>After processing the fields, the CGI script would generate a Web page with print statements to standard output, and might generate an e-mail by piping print statements to sendmail. For instance, a simple "thank you" page might be generated by:<P><pre>print "Content-type: text/html\n\n";print "&lt;HTML&gt;\n" ;print "&lt;HEAD&gt;\n" ;print "&lt;TITLE&gt;Thank you!\n" ;print "&lt;/HEAD&gt;\n" ;print "&lt;BODY&gt;\n" ;print "\n" ;print "&lt;H2&gt;Thank you, ".$field{'UserName'}.".&lt;/H2&gt;\n" ;print "&lt;P&gt;We\'ve submitted your request&lt;/P&gt;\n" ;print "&lt;/BODY&gt;\n" ;print "&lt;/HTML&gt;\n" ;</pre><P>A simple e--mail request might be generated by:<P><pre>open (MAIL, "| /usr/sbin/sendmail -t");print MAIL "To: somebody@somewhere.com\n";print MAIL "From: webserver@somewhere.com\n";print MAIL "Subject: Request\n";print MAIL "\n\n";print MAIL "".$field{'UserName'}."wants something\n" ;print MAIL "\n\n";close (MAIL);</pre><P>Note the actual location of sendmail can vary from one Unix version (and installation) to another.<P>Using CGI.pm rather than raw Perl, you wouldn't have to write any parsing code, and you wouldn't have to print raw HTML tags. Instead, you'd call some methods (or functions) from the CGI module:<P><pre>use CGI;$q = new CGI;	//this takes care of the parsingprint $q->header(),$q->start_html(-title=>'Thank you!'),$q->h2('Thank you, '.$q->param('UserName')),'We\'ve submitted your request',$q->end_html();</pre><P>Once you get used to the myriad methods and options in CGI.pm, you'll find them fairly natural to use. Which, I guess, is why most Perl CGI developers wind up using them.<P>If you have the money for some software tools, the $149 Perl Builder package is worth a look. (There's a free 14-day trial download at the site.) Perl Builder is an IDE for developing Perl scripts, both command-line scripts and CGI scripts.Perl Builder's CGI Wizard makes quick work of generating the CGI code to process form output. It starts by reading the HTML form and picking up the field names and types. You have the option to generate plain Perl, cgi-lib.pl code, or CGI.pm code. You can validate inputs, specify a template for the HTML output page, and define multiple e-mail outputs.<P>Once you've generated or written your script, Perl Builder's visual testing environment lets you simulate the CGI environment on your desktop, without having to put your script up on a live website. If you need to track down problems or make changes, you can do so easily with Perl Builder's integrated debugger and editor.<P>If you're getting paid to write CGI scripts, Perl Builder should pay back its cost in a matter of days. I like it a lot. As Jerry Pournelle says, "Recommended."<P>(Note: ActivePerl 5.6 for Linux, Solaris and Windows is now available for download for free from www.ActiveState.com.)<P>Next month, we'll finish up this series with some Perl book reviews. <P>Martin Heller consults, develops Web and Windows software, and writes from Andover, Mass. Martin is a senior contributing editor at both WinMag.com and Byte.com. You can reach Martin at mheller@spamcop.net, and visit his newest Web project -- a free diagnostic and tune-up site for Windows machines -- at http://www.pcpitstop.com.<P>For more of Martin's columns, visit the Mr. Computer Language Person Index Page.
<P>

<table cellpadding="0" cellspacing="0" border="0" width=100%>
<tr valign=bottom><td><a href="http://www.cmpnet.com/"><IMG SRC="http://img.techweb.com/shared/general/logos/cmpnet111x42.gif" ALT="CMPnet" width="111" height="42" border=0></a></td>
<td nowrap width=20>&nbsp;&nbsp;</td>
<td align=center><font size="4" face="helvetica,arial"><b><a href="http://www.cmpnet.com/">www.cmpnet.com</a></b></font><br>
<font size="2" face="geneva,arial,helvetica">The Technology Network</font></td></tr></table>

<P>
<FONT SIZE="1" face="geneva,ms sans serif,helvetica">Copyright 1998 <A HREF="http://www.cmpnet.com">CMP Media Inc.</A></FONT>
<P>
<a target="_top" href="http://newads.cmpnet.com/event.ng/Type=click&ProfileID=2221&RunID=21152&AdID=17675&GroupID=46&FamilyID=1&TagValues=163.179&Redirect=http:%2F%2Fad.preferences.com%2Fclick;spacedesc%3DiBooksPhase1_TechWeb_468x60_Windows_Any%26time%3D2000.4.16.4.21.21.0"><img src="http://ad.preferences.com/image;spacedesc=iBooksPhase1_TechWeb_468x60_Windows_Any&time=2000.4.16.4.21.21.0" border=1 height=60 width=468 alt="Click Here!"></a>
</BODY>
</HTML>


