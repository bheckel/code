<HTML>
<HEAD>
	<TITLE>Perlmonth - Columns Page</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffff" LINK="#3261A6" ALINK="#999999" VLINK="#000000">
<CENTER>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="630">
<TR>    
        <TD WIDTH="158" BGCOLOR="#000000" ALIGN="LEFT" VALIGN="TOP"><IMG SRC="/images/topleft.gif"></TD>
        <TD WIDTH="468" BGCOLOR="#000000" ALIGN="RIGHT" COLSPAN="3">
        <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
                <TR>
                        <TD VALIGN="TOP"><FONT COLOR="FFFFCC"><B></B></FONT>
                        </TD>
                </TR>
        </TABLE>
        <TD WIDTH="4" BGCOLOR="#000000" ALIGN="RIGHT" VALIGN="TOP"><IMG SRC="/images/topright.gif"></TD>
</TR>
<TR>
	<TD bgcolor=000000 VALIGN="TOP" WIDTH="158">
        <!--start navbar-->
        
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=2 WIDTH="156">

    <TR>
	<TD align=center BGCOLOR="#000000">
	
	<img src="/images/logosml.gif" width="150" height="77" alt="PerlMonth Logo">
  
	</TD>
   </TR>

                <TR ALIGN="CENTER" VALIGN="TOP">
                        <TD ALIGN="CENTER" VALIGN="TOP">
                        <FORM ACTION="/cgi-bin/register.cgi" METHOD="POST">
                        <CENTER><FONT SIZE="-1" COLOR="FFffcc"><B>Monthly Notifications.</B></FONT>
                        <FONT SIZE="-1"><INPUT TYPE="TEXT" NAME="email" VALUE="E-Mail Address" SIZE="18"><BR>
                        <INPUT TYPE="SUBMIT" NAME="Subscribe" VALUE="Subscribe">
                        <INPUT TYPE="RESET" NAME="Reset" VALUE="Clear"> 
                        </FONT></CENTER>
                        </FORM>
                        </TD>
                </TR>
  

  <TR>
  <TD BGCOLOR="#000000" ALIGN="CENTER">    
  <FORM ACTION="/cgi-bin/change_issue.cgi">
  <FONT SIZE="1" COLOR="#FFFFFF" FACE="arial,helvetical"> 
  Browsing Issue # 8</FONT><BR>
  <INPUT TYPE="Hidden" NAME="id" VALUE="947644881">
  <SELECT NAME="NewIssue" SIZE="1"  ONCHANGE=submit()>
  <OPTION VALUE="8">Select Issue</OPTION>
    <OPTION VALUE="1">Issue 1</OPTION>
<OPTION VALUE="2">Issue 2</OPTION>
<OPTION VALUE="3">Issue 3</OPTION>
<OPTION VALUE="4">Issue 4</OPTION>
<OPTION VALUE="5">Issue 5</OPTION>
<OPTION VALUE="6">Issue 6</OPTION>
<OPTION VALUE="7">Issue 7</OPTION>
<OPTION VALUE="8">Issue 8</OPTION>

</SELECT>
<INPUT TYPE="SUBMIT" NAME="Submit" VALUE="Go">
</FORM>
</TD>
</TR>

   <TR>
       <TD BGCOLOR="#FCE9CC" ALIGN="CENTER">
       <A HREF="/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#660000" FACE="arial,helvetica"><B>H o m e</B></FONT></A>
       </FONT>
       </TD>
   </TR>

  
<TR>
    <TD BGCOLOR="#660000" ALIGN="CENTER">
    <a href="/columns/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#FCE9CC" FACE="arial,helvetica"><b>C o l u m n s</FONT></b></a>
    </TD>
</TR>

<TR>
<TD BGCOLOR="#FFFFCC">
<FONT SIZE="-1" COLOR="#000000" FACE="arial,helvetica">
<B>
<UL>
  
	  <LI><A HREF="/columns/mac_perl/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#000000" FACE="arial,helvetica">Script Different</FONT></A></LI><BR>
	  <LI><A HREF="/columns/perldoc/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#000000" FACE="arial,helvetica">RTFM</FONT></A></LI><BR>
	  <LI><A HREF="/columns/modules/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#000000" FACE="arial,helvetica">Modules Explained</FONT></A></LI><BR>
	  <LI><A HREF="/columns/perl_tk/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#000000" FACE="arial,helvetica">Perl/TKed Out</FONT></A></LI><BR>
	  <LI><A HREF="/columns/perl_apache/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#000000" FACE="arial,helvetica">When Perl Met Apache</FONT></A></LI><BR>
	  <LI><A HREF="/columns/cws/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#000000" FACE="arial,helvetica">Coding With Style</FONT></A></LI><BR>
</UL>
</B>
</FONT>
</TD>
</TR>

  
<TR>
    <TD BGCOLOR="#FCE9CC" ALIGN="CENTER">
    <a href="/features/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#660000" FACE="arial,helvetica"><b>F e a t u r e s</FONT></b></a>
    </TD>
</TR>

  
<TR>
    <TD BGCOLOR="#FCE9CC" ALIGN="CENTER">
    <a href="/authors/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#660000" FACE="arial,helvetica"><b>A u t h o r s</FONT></b></a>
    </TD>
</TR>

  
<TR>
    <TD BGCOLOR="#FCE9CC" ALIGN="CENTER">
    <a href="/links/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#660000" FACE="arial,helvetica"><b>L i n k s</FONT></b></a>
    </TD>
</TR>

  
<TR>
    <TD BGCOLOR="#FCE9CC" ALIGN="CENTER">
    <a href="/jobs/index.html?issue=8&id=947644881"><FONT SIZE="-1" COLOR="#660000" FACE="arial,helvetica"><b>J o b s</FONT></b></a>
    </TD>
</TR>

  
        <!--stop navbar-->
		<TR>
			<TD BGCOLOR="#000000">&nbsp;<BR></TD>
		</TR>
		<!--POLL-->
                
<TR>
    <TD BGCOLOR="FCE9CC">
	<center><font size="+1" color="660000"><B>Get Perl !</B></font></center>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- <a href="http://www.cpan.org/src/stable.tar.gz">stable.tar.gz</a><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- <a href="http://www.cpan.org/src/devel.tar.gz">devel.tar.gz</a><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- <a href="http://www.cpan.org/src/stable.zip">stable.zip</a><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- <a href="http://www.cpan.org/src/devel.zip">devel.zip</a>
    </TD>
</TR>

                <TR>
                        <TD BGCOLOR="#000000">&nbsp;<BR></TD>
                </TR>
                <TR>
                        <TD BGCOLOR="FCE9CC" ALIGN="center" valign="middle">
                        <a href="http://www.linuxmonth.com"><font size="+1">LinuxMonth</font></a><br>
                        </TD>
                </TR>
		<TR>
			<TD BGCOLOR="#000000">&nbsp;<BR></TD>
		</TR>
		<TR>
			<TD BGCOLOR="#000000" ALIGN="CENTER">
			<A HREF="mailto:feedback@perlmonth.com?subject=PerlMonth"><FONT SIZE="+1" COLOR="FFFFFF">Feedback</FONT></A>
			</TD>
		</TR>
	
		</TABLE>
	</TD>
	
	<TD BGCOLOR="FFFFFF" width=2>&nbsp;</TD>	
	<TD BGCOLOR="FFFFFF" width=468 VALIGN="TOP">
	<BR>
	
  <A HREF="/cgi-bin/adserver.cgi?id=2"><img src="/images/node_banner.gif" alt="Banner Ad" width="468" HEIGHT="60" BORDER="0"></A>

	<BR>
	

<BR>
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top">
<FONT SIZE="+1" COLOR="660000"><B>Coding With Style</B></FONT><BR>
<A HREF="/authors/japhy/profile.html?issue=8&id=947644881">
<FONT COLOR="000099"><B>Jeff "japhy" Pinyan</B></FONT></A>
</td>
<td align="right" valign="top">
<a href="/columns/cws/cws.html?issue=8&id=947644881&print=1"><font color="000099"><b>Print Version</b></font></a>
</td>
</tr>
</table>

<H2>Files and Filehandles</H2>

<i>Note: this article deals with </i>files<i> and filehandles; getting the
output of programs, and using directories and dirhandles will be covered in
a later article.</i>

<ul>
<li> <a href="#1">The Basics</a>
	<ul>
	<li> <a href="#1.1">The <tt>open()</tt> Function</a>
	<li> <a href="#1.2">"Open this file or die!"</a>
	<li> <a href="#1.3">Closing a File</a>
	</ul>
<li> <a href="#2">Reading</a>
	<ul>
	<li> <a href="#2.1">The <tt>&lt;FH></tt> Operator</a>
	<li> <a href="#2.2">The "End of Line" Variable, <tt>$/</tt></a>
	</ul>
<li> <a href="#3">Writing</a>
	<ul>
	<li> <a href="#3.1"><tt>print()</tt> and <tt>select()</tt></a>
	<li> <a href="#3.2">Here-docs</a>
	</ul>
</ul>

<blockquote><i>Email comments to</i>
<a href="mailto:japhy@pobox.com">japhy@pobox.com</a></blockquote>

<a name="1"><h2>The Basics</h2></a>

While many people know what files and filehandles are in Perl, there are
many times that people forget exactly how they should be used.  Too often
people open files incorrectly, causing data to be lost, or they expect a
file to exist, when it really doesn't, and their program lacks the proper
error reporting to alert them.  Let's fix these problems up first.

<a name="1.1"><h3>The <tt>open()</tt> Function</h3></a>

The most common way of opening files in Perl is to use the <tt>open()</tt>
function.  Here are the most common ways files are opened:

<xmp>
    open FH, "filename";     # for reading
    open FH, "<filename";    # also for reading
    open FH, ">filename";    # create, for writing
    open FH, ">>filename";   # for appending
</xmp>

Let's be sure we have some terms straight.  "Reading" means that you can
get the contents of the file.  "Writing" means that you are placing content
in the file.  "Appending" means that you are writing, starting at the
<i>end</i> of the file; if the file does not exist, Perl attempts to create it
for you.  "Create" means the file is brought into existence if it does not
exist, and clobbered (the contents are erased) if it does.

<br><br>

If you have a filename stored in a variable, and you're opening the file for
reading, it isn't necessary to put the variable in quotes:

<xmp>
    open FOO, $file or die "can't open $file: $!";
</xmp>

And, while it isn't common practice, you can include the symbols at the
beginning of the value in the variable:

<xmp>
    $file = ">>/tmp/foo";
    open FOO, $file or die "can't append to $file: $!";
</xmp>

The reason this isn't suggested is because the symbols help you know exactly
what you're doing, and if you have 100 lines of code between the line where
you set the variable, and the line that you use it in the <tt>open()</tt>
function, you might not remember how the file is being opened.  In addition,
it's best to leave a variable holding a filename to hold JUST a filename, or
you'd have to make adjustments every time you need to read the filename out of
the variable.  Therefore, it is good practice to keep the symbols and the
filename separate:

<xmp>
    open FOO, $foo;      # you can tell instantly
    open FOO, ">$foo";   # how the filename in $foo
    open FOO, ">>$foo";  # is being used here
</xmp>

<a name="1.2"><h3>"Open this file or die!"</h3></a>

Error handling is very important when using files.  You can never be too sure;
did you open the file successfully?  If not, why?  Perl's <tt>die()</tt>
function, and the <tt>$!</tt> variable can answer your questions:

<xmp>
    $file = "/tmp/resutls.txt";  # NOTE the misspelling

    open RESULTS, $file;
    $result = <RESULTS>;
    # you aren't sure if the file opened correctly
    # unless you're using the -w switch to Perl:
    # it will whine about "reading on unopened filehandle"

    open RESULTS, $file or
        die "can't open $file: $!";
    $result = <RESULTS>;
    # now you know, because Perl will complain
    # with "can't open /tmp/resutls.txt: file not found..."
</xmp>

This remark on Perl's behalf will let you know that something is wrong with
your request to open a file.  The general rule is that you should <i>always</i>
check the return value of system calls; <tt>open()</tt> is a system call.  The
<tt>$!</tt> variable holds the value of the latest system error, and comes in
handy when <tt>die()</tt>ing.

<a name="1.3"><h3>Closing a File</h3></a>

To close a file, you simply use the <tt>close()</tt> function on the filehandle
that you used to open the file.

<xmp>
    close FH;
    close FH or die "can't close file: $!";
</xmp>

Calling <tt>close()</tt> is a system call as well, and it can't hurt to ensure
that a file was closed properly.

<a name="2"><h2>Reading</h2></a>

<a name="2.1"><h3>The <tt>&lt;FH></tt> Operator</h3></a>

It is usually not smart to slurp the contents of a file into an array; for
large files, this can use a large amount of memory.  It is much more sound to
iterate on the contents of the file, using a <tt>while</tt> loop:

<xmp>
    open FH, "file" or die $!;
    @contents = <FH>;
    close FH;

    foreach $element (@contents) {
        # line is held in $element
        chomp $element;  # remove ending newline
    }

    # ...much better if written as...

    open FH, "file" or die $!;
    while (<FH>) {  # until end of file...
        # line is held in $_
        chomp;  # if you don't want the ending newline
    }
    close FH;
</xmp>

Perl does not automatically remove the ending newline from a line when you get
it; more specifically, it does not remove the ending <tt>$/</tt> at the end of
a line -- look below to learn about this variable and its usefulness.  Use the
<tt>chomp()</tt> function to safely get rid of this ending sequence; while you
had to use <tt>chop()</tt> in Perl 4, Perl 5 has added this safer function.  A
common mistake when using a <tt>while</tt> loop is skipping lines in the file,
like so:

<xmp>
    while (<FH>) {     # this stores the line in $_
        $line = <FH>;  # this put the NEXT line in $line
    }
</xmp>

If you only use the <tt>$line</tt> variable there, you'll end up missing every
other line.  What was meant here was one of the following:

<xmp>
    while (defined($line = <FH>)) { ... }
    while (<FH>) { $line = $_; }
    while (!eof(FH)) { $line = <FH>; }
</xmp>

The first example there shows how <tt>while (&lt;FH>)</tt> actually works:  it
is the same as <tt>while (defined($_ = &lt;FH>))</tt>.  This is <i>only</i>
true when this is the ONLY statement in the <tt>while</tt> loop's condition.
The reason <tt>defined()</tt> is required here is to ensure a line consisting
of a <tt>0</tt> and nothing else (a rare case, but hey...) is still considered
a line.  The third example uses the <tt>eof()</tt> function; this function is
three-fold in nature, but we will only discuss the <tt>eof(FH)</tt> usage here
(the rest will be explained in a future column, and you can read it on your own
in the <i>perlfunc</i> documentation (see the <a href="#4">Resources</a>
section at the end of the article)).

<br><br>

The <tt>&lt;FH></tt> notation returns either a single line of the file, if
used in scalar context, or the remaining lines in the file, if used in list
context:

<xmp>
    $first = <FH>;
    $second = <FH>;
    @rest = <FH>;

    ($first,$second,@rest) = <FH>;
</xmp>

That final line does the same as the first three; because there's a list on the
left hand side, <tt>&lt;FH></tt> is called in list context.  <tt>&lt;FH></tt>
returns false (specifically, <tt>undef</tt> if called in scalar context, and an
empty list in list context) upon reaching the end of the file, and the next
call will start from the beginning of the file.  Because <tt>@rest =
&lt;FH></tt> is in list context, <tt>@rest</tt> does not have a final element
of <tt>undef</tt>.

<a name="2.2"><h3>The "End of Line" Variable, <tt>$/</tt></h3></a>

When you read from a file using <tt>&lt;FH></tt>, you get the content from
your current position to the end of the "line"... but what denotes the end of
a line?  The <tt>$/</tt> variable, which defaults to <tt>\n</tt>, is what Perl
uses to determine if it's reached the end of a line.  If you change the value,
Perl changes its definition of a line.  Here's an example:

<xmp>
    {
        local $/ = "\n%%\n";  # why use local?
        chomp($line = <FH>);
    }
</xmp>

The "end of line" string <tt>\n%%\n</tt> is a common one used for signature
file quotes, as well as for the fortunes for the popular <i>fortune</i>
program found on many Unix boxes.  Why do we use <tt>local()</tt> here, instead
of <tt>my()</tt>?  Short answer is, we have to, because <tt>$/</tt> is a
special Perl variable.  Enclosing the code in a pair of braces as shown is a
way of ensuring <tt>$/</tt> gets its original value back.  Also, we can use
<tt>chomp()</tt> to remove the value of <tt>$/</tt> from the end of a string.

<br><br>

There are two special values <tt>$/</tt> can be set to: <tt>undef</tt>, and
<tt>""</tt>.  They are <i>not</i> the same value, mind you.  Setting it to
<tt>undef</tt> means that <i>is</i> no "end of line" marker, so using the
<tt>&lt;FH></tt> operator will return the entire file as one long string.
This is not as inefficient as you may think it would be; it is a fast, and
effective way to get the entire contents of a file into a string.  The other
value, <tt>""</tt>, turns on "paragraph mode", meaning a "line" will be any
series of characters ended by two or more newline characters.  In this special
case, <tt>chomp()</tt> removes all newlines at the end of the string.  Please
note, however, that <tt>$/</tt> is a <i>string</i>, and not a regular
expression.  Setting it to <tt>"\n+"</tt> will make a line a string of
characters ending in a newline followed by a plus sign.

<a name="3"><h2>Writing</h2></a>

<a name="3.1"><h3><tt>print()</tt> and <tt>select()</tt></h3></a>

The <tt>print()</tt> function is rather simple one to use; the syntax is (says
the <i>perlfunc</i> manpage):

<xmp>
    print LIST
    print FILEHANDLE LIST
    print
    print FILEHANDLE
</xmp>

<tt>FILEHANDLE</tt> can either be a filehandle (<tt>FOO</tt>), or a variable
containing a reference to a filehandle, or a string containing the name of a
filehandle (that will be discussed in the second article on files and
filehandles).  <tt>LIST</tt> is a regular list.  If the <tt>LIST</tt> is
omitted, <tt>print()</tt> uses <tt>$_</tt>.  If the <tt>FILEHANDLE</tt> is
omitted, <tt>print()</tt> defaults to <tt>STDOUT</tt>, or the filehandle
currently <tt>select()</tt>ed.

<br><br>

The one argument version of the <tt>select(FH)</tt> function makes the given
filehandle the default one; Perl programs start out as though you had said
<tt>select(STDOUT)</tt>.  This function returns the filehandle that is
<i>currently</i> <tt>select()</tt>ed:

<xmp>
    print "This goes to STDOUT\n";
    $oldfh = select(NEWFH);
    print "This goes to NEWFH\n";
    select($oldfh);
    print "This goes to STDOUT\n";
</xmp>

Note: this example shows the use of a scalar in place of a filehandle.  This
"magic" is explained in the next article on this topic, which will describe
more advanced file and filehandle operations.

<a name="3.2"><h3>Here-docs</h3></a>

As a programmer who's looked over other peoples' code, I must say one of the
ugliest things I've seen is the overuse of <tt>print</tt> statements.  I see
gunk like:

<xmp>
    print "<a href=\"foo.html\">Click Here!</a>\n";
    print "<br>\n";
    print "<h1 align=\"center\">Other Links</h1>\n";
    # etc...
</xmp>

There are a couple things I find unfavorable:  the need to backslash <tt>"</tt>
everywhere, the multiple statements when ONE will do, and sometimes, the
programmer doesn't put any <tt>\n</tt>'s in at all, and the output is very
messy to the eye.  Since we know that <tt>print()</tt> can take a list, we
could say:

<xmp>
    print "Come, listen to a story\n",
          "About a man named Jed.\n",
          "etc.\n";
</xmp>

But if we want to include quotes in there, as well as variables, single quotes
around the lines won't help:  the <tt>\n</tt>'s won't be interpolated, and
neither will the variables.  We could use the <tt>qq()</tt> operator, which
allows for a different symbol than <tt>"</tt> to be used to delimit quoted
text:

<xmp>
    print qq!You can't use a \! in here without
             putting a backslash in front of it\n!;
</xmp>

But just like regular quotes, you need to backslash the quote character.  To
get around this, we could use paired delimiters, like <tt>{}</tt>:

<xmp>
    print qq{You can nest { these things } safely\n};
</xmp>

And as the example shows, <i>pairs</i> can be nested; the number of left and
right units of the pair must match.  To make a hanging <tt>}</tt> or <tt>{</tt>
you'd need to backslash it.  The final workaround is one I highly suggest, the
<i>here-doc</i>.  Borrowed from <i>sh</i>, they have a rather simple syntax:

<xmp>
    print <<THIS;
    is double-quoted context
    THIS

    print << 'HERE WE HAVE';
    single-quoted context
    HERE WE HAVE

    print << "AND THIS IS";
    double-quoted
    AND THIS IS
</xmp>

Note the semicolon after the label on the <tt>print()</tt> statement!
You can also use backticks around the label, but that is seldom done.  A very
important rule is that if you do not use quotes around the label, it must
<i>immediately</i> follow the <tt>&lt;&lt;</tt>.  Another one is that the
closing label must be reproduced <i>exactly</i> as shown in the <tt>print</tt>
statement, on its own line, and that there must then be a newline after the
closing label:

<xmp>
    print FH << "  two leading spaces";
    la dee da
    two leading spaces
    that line above was NOT a valid close to
    this here-doc
      two leading spaces
</xmp>

If you get an error like "Can't find string terminator "END TEXT" anywhere
before EOF at <i>filename</i> line <i>nnn</i>." then be sure you typed the
label the same way in the beginning and the ending.  If they are the same, and
your ending label is on the last line of your file, be sure there is actually
a newline after that last line.

<br><br>

You can have multiple here-docs in one statement:

<xmp>
    print HTML << "end header", << "end body";
    <html>
    <head><title>"I can use quotes!"</title>
    </head>
    end header
    <body>This is now in the 'end body' section.</body>
    end body
</xmp>

As an aside, here-docs can be used when passing arguments to functions, etc.:

<xmp>
    makeHTML(<< "end of body", $title);
    <body>
    blah blah blah
    </body>
    end of body

    $text = << 'EOF';
    this is a multi-line string
    placed into $text.  and since
    pressing enter makes a real newline,
    I can make newlines while using
    single quotes!
    EOF
</xmp>

<a name="4"><h2>Resources</h2></a>

To read more on opening files, read <i>perlopentut</i>, available at <a
href="http://language.perl.com/newdocs/pod/perlopentut.html">http://language.perl.com/newdocs/pod/perlopentut.html</a>.
The documentation on the functions mentioned here is all available in the
<i>perlfunc</i> section of the docs, or by typing <tt>perlfunc -f NAME</tt> at
your command prompt.  <tt>$/</tt> is documented in <i>perlvar</i>.  Here-docs
are discussed in <i>perldata</i>.  All this documentation is also found online
at <a href="http://language.perl.com/">http://language.perl.com/</a>.

<!-- END -->

<BR><BR>
  
	</TD>
        <TD BGCOLOR="FFFFFF" WIDTH="1">&nbsp;</TD>
        <TD BGCOLOR="000000" WIDTH="1">&nbsp;</TD>
</TR>
<TR>    
        <TD WIDTH="158" BGCOLOR="#000000" ALIGN="LEFT" VALIGN="BOTTOM"><IMG SRC="/images/bottomleft.gif"></TD>
        <TD WIDTH="468" BGCOLOR="#000000" ALIGN="CENTER" COLSPAN="3">
        <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
                <TR>
                        <TD ALIGN="RIGHT" VALIGN="BOTTOM">&nbsp;
                        </TD>
                </TR>
        </TABLE>
        <TD WIDTH="4" BGCOLOR="#000000" ALIGN="LEFT" VALIGN="BOTTOM"><IMG SRC="/images/bottomright.gif"></TD>
</TR>

</TABLE>
<BR>
<CENTER>


[&nbsp;&nbsp;&nbsp;
<A HREF="/aboutus/index.html?issue=8&id=947644881"><FONT COLOR="000099"><B>About Us</B></FONT></A>
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
<A HREF="/contactus/index.html?issue=8&id=947644881"><FONT COLOR="000099"><B>Contact Us</B></FONT></A>
&nbsp;&nbsp;&nbsp;]<p>
<font size="-1">Copyright to all articles belong to their respective authors. Everything else &copy 1999
<A HREF="http://www.perlmonth.com/"><FONT COLOR="000099"><B>PerlMonth</B></FONT></A>


</CENTER>
</BODY>
</HTML>
