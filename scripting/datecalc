#!/usr/bin/perl
##############################################################################
#     Name: datecalc.pl
#
#  Summary: Calc date range from x to y based on today or a user provided
#           start date.
#
#  Created: Fri 10 Sep 1999 14:58:24 (Bob Heckel)
# Modified: 04-Oct-2022 (Bob Heckel)
##############################################################################
use Time::Local;  # for timelocal()

use constant SECSPERDAY =>  24 * 60 * 60;

print "\nDEPRECATED: use e.g. date --date='-900 days'\n\n";
Usage() if ( !@ARGV || $ARGV[0] =~ /-+h.*/ );

# Start date or days into future, if any.
$startdt = $ARGV[0];
# Number of days into future, if any.
$daysfut = $ARGV[1];

($mon, $day, $year) = (localtime())[4,3,5];
# If you've been provided _at least_ a valid date on commandline:
if ( $startdt =~ /(\d+)\/(\d+)\/(\d+)/ ) {
  $zerobasearrmo = $1-1;
  $day           = $2;
  $yr            = $3;
  Calctime($zerobasearrmo, $day, $yr, $daysfut);
  # Want today's date used, you're only provided the days into future:
} elsif ( $startdt =~ /\+?\-?\d+/ ) {
  $daysfut = $startdt;
  Calctime($mon , $day , $year, $daysfut);
  # Use all defaults (i.e. today and 45 days), nothing passed on commandline:
} elsif ( $startdt eq "" && $daysfut eq "" ) {
  Calctime($mon , $day , $year, $daysfut );
}


sub Calctime {
  my ($month, $dayz, $yearz, $dayfut) = @_;
  # Turn the date pieces into Unix time e.g. 1027483200
  #                      sec min hr day      mon       yr
  $unixtime = timelocal(0, 0, 0, $dayz, $month, $yearz);
  $startdt = scalar localtime $unixtime;
  # TODO Remove the unwanted 00:00:00 more gracefully than this.
  $startdt =~ s/\d\d:\d\d:\d\d//;
  $calcdt = $unixtime + $dayfut*SECSPERDAY;
  $calcdt = scalar localtime($calcdt);
  $calcdt =~ s/\d\d:\d\d:\d\d//;  # remove the time info
  printf("%d Day%s from %s is %s\n", $dayfut, 
                                     $dayfut==1 ? "" : "s", 
                                     $startdt,
                                     $calcdt,);

  return 0;
}


sub Usage {
  my $filename = $1 if $0 =~ m|[/\\:]+([^/\\:]+)$|;
  print <<"EOT";
Usage: $filename [mm/dd/yy] [+/-]nn
  E.g. datecalc -90
       datecalc 12/24/05 +42
  Returns the date n days in future (or past).  Leading '+' is optional.
EOT
  exit(__LINE__);
}
