''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'     Name: OpenRefreshSaveEachSpdsht.bas
'
'  Summary: Open each spreadsheet (or .HTM !) in a user-specified directory
'           in order to refresh the Excel cell links.
'
'  Created: Tue May 21 15:28:47 2002 (Bob Heckel)
' Modified: Tue Jun 11 13:53:37 2002 (Bob Heckel -- include *.htm *.HTM as
'                                     well as .xls and .XLS)
' Modified: 06/17/2002 04:32:53 (Bob Heckel -- ignore a specific directory)
' Modified: Wed Jun 19 16:14:29 2002 (Bob Heckel -- added debugging info)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Force array indexing to coincide with the file counter.
Option Base 1

Dim aFiles() As String  ' global


' This subroutine is attached to the Button.
Sub Main()
  On Error GoTo ENTROPYMAIN
  Static iFileCnt As Integer            ' total files seen
  Static iFileCntXLSHTMOnly As Integer  ' total files processed
  Dim sPath As String                   ' user defined or use cell A12
  Dim sInputPrompt As String            ' prompt user for path
  Dim sPlural As String                 ' make MsgBox use proper English
  Dim sPluralXLSHTM As String           ' make MsgBox use proper English
  Dim sIgnored As String                ' dir to skip based on cell A14

  sPath = ""
  iFileCnt = 0   ' file counter and array indexer
  iFileCntXLSHTMOnly = 0

  sInputPrompt = "Please enter path WITH TRAILING BACKSLASH. " & _
                 Chr(13) & Chr(10) & "Click OK to start refreshing " & _
                 "Excel links."

  sPath = InputBox(sInputPrompt, Default:=Range("A12").Value)
  ' Weird behavior if user keys a bad path AND doesn't include backslash.
  ' This avoids the problem.
  If Right(sPath, 1) <> "\" Then
    ' VB error "File not found (Error 53)"
    Err.Raise 53
  End If

  If sPath <> "" Then
    OperateOnFilesInDir sPath, iFileCnt, iFileCntXLSHTMOnly
  Else
    MsgBox "Operation cancelled by user.  Exiting."
    Exit Sub
  End If

  sIgnored = IIf(Range("a14").Value <> "", Range("a14").Value, _
                 "<no subdirectories, processed all of them>")

  ' TODO use Windows file browser thing to select directory
  ' Display the last run's path for user (allow copy/pasting).
  Range("A12").Value = sPath
  '''Debug.Print iFileCnt & " total file(s) total (some may not be .XLS/.HTM)"
  '''Debug.Print iFileCntXLSHTMOnly & " total Excel or .HTM file(s) found."
  sPlural = IIf((iFileCnt > 1), "s" & Chr(32), Chr(32))
  sPluralXLSHTM = IIf((iFileCntXLSHTMOnly > 1), "s" & Chr(32), Chr(32))
  MsgBox "Finished.  Found " & _
         iFileCnt & _
         " file" & _
         sPlural & _
         "in " & _
         sPath & _
         " and its subdirectories." & _
         Chr(13) & Chr(10) & _
         Chr(13) & Chr(10) & _
         "Opened, refreshed, saved and closed " & _
         iFileCntXLSHTMOnly & _
         " .XLS or .HTM file" & _
         sPluralXLSHTM & _
         "successfully." & _
         Chr(13) & Chr(10) & _
         Chr(13) & Chr(10) & _
         "Ignored: " & sIgnored
Exit Sub
ENTROPYMAIN:
  If Err.Number = 53 Then
     MsgBox "You may be missing a trailing backslash.  Or your " & _
             "path does not exist.  Exiting."
  Else
    sMsg = "Error # " & Str(Err.Number) & " was generated by " _
              & Err.Source & Chr(13) & "Description: " & Err.Description
    MsgBox sMsg, , "An error has occurred in Sub Main " & _
           Erl, Err.HelpFile, Err.HelpContext
  End If
End Sub

  
Sub OperateOnFilesInDir(sDir As String, iFileCnt As Integer, _
                        iFileCntXLSHTMOnly As Integer)
  On Error GoTo ENTROPYFILE
  Dim aDirs() As String
  Dim iDir As Integer
  Dim sFile As String
  
  ' TODO allow for >1 directory to be excluded
  ' Skip user-specified unwanted directory:
  If sDir = Range("a14").Value Then
    Debug.Print "IGNORING DIRECTORY: " & sDir
    Exit Sub
  End If

  iDir = 0   ' initialize the directory array index
  ' Use Dir() to find files and directories in sDir.  Look for directories and
  ' build an array of them.  Note that Dir() returns files as well as
  ' directories when vbDirectory specified.
  sFile = sDir & Dir(sDir & "*.*", vbDirectory)

  Do While sFile <> sDir
    If Right(sFile, 2) = "\." Or Right(sFile, 3) = "\.." Then
      ' Do nothing - GetAttr doesn't like these pseudo directories.
      Debug.Print "dotfile: " & sFile
    ElseIf GetAttr(sFile) = vbDirectory Then
      ' Add dirname to local array of directories.
      iDir = iDir + 1
      ReDim Preserve aDirs(iDir)
      aDirs(iDir) = sFile
    Else
      ' Add to global array of files.
      iFileCnt = iFileCnt + 1
      ReDim Preserve aFiles(iFileCnt)
      aFiles(iFileCnt) = sFile
    End If

    sFile = sDir & Dir()
    
    ' GetAttr(sFile) is 32 if we are on a file, 16 (constant vbDirectory) if
    ' on a directory.
    ' This next line will crash Excel:
    '''If GetAttr(sFile) <> vbDirectory Then
    If (GetAttr(sFile) And vbDirectory) <> vbDirectory Then
      ' Do the Open, Update and Save operation on Excel spreadsheets and HTML
      ' documents (HTML contains links that are visible when opened in Excel)
      ' Case-sensitive.
      If (sFile Like "*.xls") Or (sFile Like "*.XLS") Or (sFile Like "*.htm") _
         Or (sFile Like "*.HTM") Then
        Debug.Print "sFile is " & sFile
        Application.ScreenUpdating = False
        Application.AskToUpdateLinks = False
        Workbooks.Open Filename:=sFile, updatelinks:=1
        ActiveWorkbook.Save
        ActiveWorkbook.Close
        Application.AskToUpdateLinks = True
        Application.ScreenUpdating = True
        ' TODO overcounting -- looks like it counts directories as a file
        iFileCntXLSHTMOnly = iFileCntXLSHTMOnly + 1
      End If
    End If
  Loop
    
  ' For any directories in aDirs[], call myself recursively.
  If iDir > 0 Then
    Debug.Print "Dropping into " & sDir & _
                                   " recursive call to OperateOnFilesInDir()"
    For iDir = 1 To UBound(aDirs)
      OperateOnFilesInDir aDirs(iDir) & Application.PathSeparator, _
                          iFileCnt, iFileCntXLSHTMOnly
    Next iDir
  End If
Exit Sub
ENTROPYFILE:
  sMsg = "Error # " & Str(Err.Number) & " was generated by " _
            & Err.Source & Chr(13) & "Description: " & Err.Description
  MsgBox sMsg, , "An error has occurred in Sub OperateOnFilesInDir " & _
         Erl, Err.HelpFile, Err.HelpContext
End Sub
